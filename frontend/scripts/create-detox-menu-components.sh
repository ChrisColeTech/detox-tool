#!/bin/bash

#============================================================================
# Detox Tool Component Generator Script
# Category: menu-components
# Description: Menu and dropdown components
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating menu-components for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/components/menu/
mkdir -p src/components/search
mkdir -p src/components/sidebar
mkdir -p src/components/menu
mkdir -p src/components/titlebar
mkdir -p src/pages/settings
mkdir -p src/contexts
mkdir -p src/utils
mkdir -p src/data
mkdir -p src/lib
mkdir -p src/types

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.165Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/menu
# Target OS: cross-platform
# Directories: 0
# Files: 4
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create DropdownMenu.tsx
cat > "src/components/menu/DropdownMenu.tsx" << 'EOF'
import { useState, useRef, useEffect } from 'react'
import MenuItem, { type MenuItemType } from './MenuItem'
import Submenu from './Submenu'

interface DropdownMenuProps {
  onClose: () => void
}

const DropdownMenu = ({ onClose }: DropdownMenuProps) => {
  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null)
  const timeoutRef = useRef<number | null>(null)

  const handleMouseEnter = (itemId: string) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current)
      timeoutRef.current = null
    }
    setActiveSubmenu(itemId)
  }

  const handleMouseLeave = () => {
    timeoutRef.current = window.setTimeout(() => {
      setActiveSubmenu(null)
    }, 200)
  }

  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current)
      }
    }
  }, [])

  const handleMenuItemClick = (item: MenuItemType) => {
    if (item.type === 'separator' || item.hasSubmenu) return
    onClose()
  }

  const menuItems = [
    {
      id: 'file',
      label: 'File',
      hasSubmenu: true,
      submenuItems: [
        { id: 'new', label: 'New File', shortcut: 'Ctrl+N' },
        { id: 'open', label: 'Open File...', shortcut: 'Ctrl+O' },
        { id: 'save', label: 'Save', shortcut: 'Ctrl+S' },
        { id: 'save-as', label: 'Save As...', shortcut: 'Ctrl+Shift+S' },
        { type: 'separator' as const },
        { id: 'recent', label: 'Open Recent', hasSubmenu: true }, // This submenu would need further definition or handling
        { type: 'separator' as const },
        { id: 'exit', label: 'Exit', shortcut: 'Alt+F4' },
      ],
    },
    {
      id: 'edit',
      label: 'Edit',
      hasSubmenu: true,
      submenuItems: [
        { id: 'undo', label: 'Undo', shortcut: 'Ctrl+Z' },
        { id: 'redo', label: 'Redo', shortcut: 'Ctrl+Y' },
        { type: 'separator' as const },
        { id: 'cut', label: 'Cut', shortcut: 'Ctrl+X' },
        { id: 'copy', label: 'Copy', shortcut: 'Ctrl+C' },
        { id: 'paste', label: 'Paste', shortcut: 'Ctrl+V' },
        { type: 'separator' as const },
        { id: 'find', label: 'Find', shortcut: 'Ctrl+F' },
        { id: 'replace', label: 'Replace', shortcut: 'Ctrl+H' },
      ],
    },
    {
      id: 'view',
      label: 'View',
      hasSubmenu: true,
      submenuItems: [
        { id: 'command-palette', label: 'Command Palette...', shortcut: 'Ctrl+Shift+P' },
        { type: 'separator' as const },
        { id: 'explorer', label: 'Explorer', shortcut: 'Ctrl+Shift+E' },
        { id: 'search', label: 'Search', shortcut: 'Ctrl+Shift+F' },
        { id: 'extensions', label: 'Extensions', shortcut: 'Ctrl+Shift+X' },
        { type: 'separator' as const },
        { id: 'terminal', label: 'Terminal', shortcut: 'Ctrl+`' },
      ],
    },
    {
      id: 'help',
      label: 'Help',
      hasSubmenu: true,
      submenuItems: [
        { id: '', label: 'Documentation' },
        { id: 'shortcuts', label: 'Keyboard Shortcuts', shortcut: 'Ctrl+K Ctrl+S' },
        { type: 'separator' as const },
        { id: 'about', label: 'About AI Editor' },
      ],
    },
  ]

  return (
    <div className="absolute top-full left-0 z-20 bg-surface app-border shadow-theme py-1 min-w-48">
      {menuItems.map((item) => (
        <div
          key={item.id}
          className="relative"
          onMouseEnter={() => item.hasSubmenu && handleMouseEnter(item.id)}
          onMouseLeave={handleMouseLeave}
        >
          <MenuItem
            item={item}
            onMouseEnter={() => {}}
            onMouseLeave={() => {}}
            onClick={handleMenuItemClick}
          />
          {activeSubmenu === item.id && item.submenuItems && (
            <Submenu items={item.submenuItems} onClose={onClose} />
          )}
        </div>
      ))}
    </div>
  )
}

export default DropdownMenu

EOF

# Create MenuButton.tsx
cat > "src/components/menu/MenuButton.tsx" << 'EOF'
import { useState } from 'react'
import { Menu } from 'lucide-react'
import DropdownMenu from './DropdownMenu'

const MenuButton = () => {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div className="relative">
      <div
        onClick={() => setIsOpen(!isOpen)}
        className="w-12 h-8 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover transition-colors cursor-pointer"
        title="Application menu"
      >
        <div className="tab-icon [&_svg]:stroke-1">
          <Menu size={12} />
        </div>
      </div>

      {isOpen && (
        <>
          <div className="fixed inset-0 z-10" onClick={() => setIsOpen(false)} />
          <DropdownMenu onClose={() => setIsOpen(false)} />
        </>
      )}
    </div>
  )
}

export default MenuButton

EOF

# Create MenuItem.tsx
cat > "src/components/menu/MenuItem.tsx" << 'EOF'
import React from 'react'
import { ChevronRight } from 'lucide-react'

export type RegularMenuItem = {
  id: string
  label: string
  hasSubmenu?: boolean
  shortcut?: string
  disabled?: boolean
  icon?: React.ReactNode
  action?: () => void
  type?: undefined
  submenuItems?: MenuItemType[]
}

export type SeparatorMenuItem = {
  type: 'separator'
  id?: string
  label?: never
  hasSubmenu?: never
  shortcut?: never
  disabled?: never
  icon?: never
  action?: never
  submenuItems?: never
}

export type MenuItemType = RegularMenuItem | SeparatorMenuItem

interface MenuItemProps {
  item: MenuItemType
  onMouseEnter?: () => void
  onMouseLeave?: () => void
  onClick: (item: MenuItemType) => void // Pass the item back on click
  className?: string
}

const MenuItem = ({ item, onMouseEnter, onMouseLeave, onClick, className }: MenuItemProps) => {
  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {
    e.stopPropagation()
    if (item.type === 'separator' || item.disabled) return

    if (item.type !== 'separator' && item.action) {
      item.action()
    }
    onClick(item)
  }

  if (item.type === 'separator') {
    return <div className="my-1 h-px bg-border mx-2" key={item.id || Math.random()} />
  }

  // For regular menu items
  return (
    <div
      role="menuitem"
      tabIndex={item.disabled ? -1 : 0} // Disable tabbing if item is disabled
      className={`flex items-center justify-between px-3 py-1.5 text-base text-text ${
        item.disabled
          ? 'text-text-disabled cursor-not-allowed'
          : 'hover:bg-surface-hover hover:text-accent cursor-pointer focus:bg-surface-hover focus:text-accent focus:outline-none'
      } ${className || ''}`.trim()}
      onMouseEnter={onMouseEnter}
      onMouseLeave={onMouseLeave}
      onClick={handleClick}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          handleClick(e)
        }
      }}
      aria-disabled={item.disabled}
      aria-haspopup={item.hasSubmenu}
    >
      <div className="flex items-center gap-2">
        {item.icon && (
          <span className="menu-item-icon w-4 h-4 flex items-center justify-center [&_svg]:stroke-1">
            {item.icon}
          </span>
        )}
        <span>{item.label}</span>
      </div>
      <div className="flex items-center space-x-2">
        {item.shortcut && <span className="text-sm text-text-muted">{item.shortcut}</span>}
        {item.hasSubmenu && (
          <div className="submenu-indicator [&_svg]:stroke-1">
            <ChevronRight size={14} className="text-text-muted" />
          </div>
        )}
      </div>
    </div>
  )
}

export default MenuItem

EOF

# Create Submenu.tsx
cat > "src/components/menu/Submenu.tsx" << 'EOF'
import { useState, useRef } from 'react'
import MenuItem, { type MenuItemType } from './MenuItem'

interface SubmenuProps {
  items: MenuItemType[]
  onClose: (item?: MenuItemType) => void
  className?: string
  onMouseEnter?: (e: React.MouseEvent) => void
  onMouseLeave?: (e: React.MouseEvent) => void
}

const Submenu = ({ items, onClose, className, onMouseEnter, onMouseLeave }: SubmenuProps) => {
  const [activeNestedSubmenu, setActiveNestedSubmenu] = useState<string | null>(null)
  const nestedTimeoutRef = useRef<number | null>(null)

  const handleItemMouseEnter = (item: MenuItemType) => {
    if (item.type !== 'separator' && item.hasSubmenu) {
      if (nestedTimeoutRef.current) {
        clearTimeout(nestedTimeoutRef.current)
      }
      setActiveNestedSubmenu(item.id)
    } else {
      if (nestedTimeoutRef.current) clearTimeout(nestedTimeoutRef.current)
      setActiveNestedSubmenu(null)
    }
  }

  const handleItemMouseLeave = (item: MenuItemType) => {
    if (item.type !== 'separator' && item.hasSubmenu) {
      nestedTimeoutRef.current = window.setTimeout(() => {
        setActiveNestedSubmenu(null)
      }, 200)
    }
  }

  const handleSubmenuMouseEnter = () => {
    if (nestedTimeoutRef.current) {
      clearTimeout(nestedTimeoutRef.current)
    }
  }

  const handleItemClick = (item: MenuItemType) => {
    if (item.type === 'separator' || item.disabled) return

    if (!item.hasSubmenu) {
      onClose(item)
    }
  }

  return (
    <div
      role="menu"
      className={`absolute top-0 left-full -ml-px bg-surface border border-border shadow-lg min-w-48 z-30 ${
        className || ''
      }`.trim()}
      onMouseEnter={(e) => {
        onMouseEnter?.(e)
        handleSubmenuMouseEnter()
      }}
      onMouseLeave={onMouseLeave}
    >
      {items.map((item) => (
        <div
          key={item.type === 'separator' ? `sep-${item.id || Math.random()}` : item.id}
          className="relative"
          onMouseEnter={() => handleItemMouseEnter(item)}
          onMouseLeave={() => handleItemMouseLeave(item)}
        >
          <MenuItem item={item} onClick={() => handleItemClick(item)} />
          {item.type !== 'separator' &&
            item.hasSubmenu &&
            activeNestedSubmenu === item.id &&
            item.submenuItems && (
              <Submenu
                items={item.submenuItems}
                onClose={onClose}
                onMouseEnter={handleSubmenuMouseEnter}
              />
            )}
        </div>
      ))}
    </div>
  )
}

export default Submenu

EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ menu-components components created successfully!"
