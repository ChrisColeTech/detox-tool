#!/bin/bash

#============================================================================
# Detox Tool Component Generator Script
# Category: sidebar-components
# Description: Sidebar navigation components
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating sidebar-components for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/components/sidebar/
mkdir -p src/components/search
mkdir -p src/components/sidebar
mkdir -p src/components/menu
mkdir -p src/components/titlebar
mkdir -p src/pages/settings
mkdir -p src/contexts
mkdir -p src/utils
mkdir -p src/data
mkdir -p src/lib
mkdir -p src/types

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.145Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/sidebar
# Target OS: cross-platform
# Directories: 0
# Files: 4
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create CollapseButton.tsx
cat > "src/components/sidebar/CollapseButton.tsx" << 'EOF'
import { ChevronsLeft, ChevronsRight } from 'lucide-react'

interface CollapseButtonProps {
  isExpanded: boolean
  position: 'left' | 'right'
  onToggle: () => void
}

const CollapseButton = ({ isExpanded, position, onToggle }: CollapseButtonProps) => {
  const getIcon = () => {
    if (isExpanded) {
      return position === 'left' ? <ChevronsLeft size={18} /> : <ChevronsRight size={18} />
    } else {
      return position === 'left' ? <ChevronsRight size={18} /> : <ChevronsLeft size={18} />
    }
  }

  return (
    <div
      onClick={onToggle}
      className="h-8 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover transition-colors cursor-pointer"
      title={isExpanded ? 'Collapse sidebar' : 'Expand sidebar'}
    >
      <div className="sidebar-icon [&_svg]:stroke-1">{getIcon()}</div>
    </div>
  )
}

export default CollapseButton

EOF

# Create NavItem.tsx
cat > "src/components/sidebar/NavItem.tsx" << 'EOF'
import React from 'react'

interface NavItemProps {
  id: string
  label: string
  icon: React.ReactNode
  isActive: boolean
  position: 'left' | 'right'
  onClick: () => void
  isVisible?: boolean
  isPinned?: boolean
  onToggleVisibility?: (itemId: string, defaultVisible: boolean) => void
  onTogglePin?: (itemId: string) => void
}

const NavItem = ({ label, icon, isActive, position, onClick }: NavItemProps) => {
  return (
    <div
      onClick={onClick}
      className={`h-12 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover transition-colors relative cursor-pointer ${
        isActive ? 'text-text bg-surface-hover font-semibold' : 'font-normal'
      }`}
      title={label}
    >
      {isActive && (
        <div
          className={`absolute top-0 bottom-0 w-0.5 bg-accent ${
            position === 'left' ? 'left-0' : 'right-0'
          }`}
        />
      )}
      <div className={`sidebar-icon ${isActive ? 'stroke-1' : '[&_svg]:stroke-1'}`}>{icon}</div>
    </div>
  )
}

export default NavItem

EOF

# Create NavigationItems.tsx
cat > "src/components/sidebar/NavigationItems.tsx" << 'EOF'
import { getSidebarItems, getSidebarIcon } from '../../config/navigationConfig'
import NavItem from './NavItem'

interface NavigationItemsProps {
  activeTab: string
  position: 'left' | 'right'
  onTabChange: (tabId: string) => void
  isSidebarItemVisible?: (itemId: string, defaultVisible: boolean) => boolean
  pinnedItems?: string[]
  onToggleVisibility?: (itemId: string, defaultVisible: boolean) => void
  onTogglePin?: (itemId: string) => void
}

const NavigationItems = ({
  activeTab,
  position,
  onTabChange,
  isSidebarItemVisible = () => true,
  pinnedItems = [],
  onToggleVisibility,
  onTogglePin,
}: NavigationItemsProps) => {
  const sidebarNavItems = getSidebarItems()

  // Filter items based on user visibility preferences (items already filtered by showInSidebar)
  const visibleNavItems = sidebarNavItems.filter((item) => {
    const defaultVisibility = item.defaultVisible ?? true
    return isSidebarItemVisible(item.id, defaultVisibility)
  })

  // Sort items: pinned items first, then regular items by order
  const sortedNavItems = [...visibleNavItems].sort((a, b) => {
    const aIsPinned = pinnedItems.includes(a.id)
    const bIsPinned = pinnedItems.includes(b.id)

    if (aIsPinned && !bIsPinned) return -1
    if (!aIsPinned && bIsPinned) return 1

    return (a.order || 999) - (b.order || 999)
  })

  const navItems = sortedNavItems

  return (
    <>
      {navItems.map((item) => (
        <NavItem
          key={item.id}
          id={item.id}
          label={item.label}
          icon={getSidebarIcon(item.id)}
          isActive={activeTab === item.id}
          position={position}
          onClick={() => onTabChange(item.id)}
          isVisible={isSidebarItemVisible(item.id, item.defaultVisible ?? item.showInSidebar)}
          isPinned={pinnedItems.includes(item.id)}
          onToggleVisibility={onToggleVisibility}
          onTogglePin={onTogglePin}
        />
      ))}
    </>
  )
}

export default NavigationItems

EOF

# Create SettingsButton.tsx
cat > "src/components/sidebar/SettingsButton.tsx" << 'EOF'
import { Settings as SettingsIcon } from 'lucide-react'

interface SettingsButtonProps {
  onClick: () => void
  isActive: boolean
  position: 'left' | 'right'
}

const SettingsButton = ({ onClick, isActive, position }: SettingsButtonProps) => {
  const handleClick = () => {
    onClick()
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === ' ') {
      console.log('SettingsButton: key down detected:', e.key)
      onClick()
    }
  }

  return (
    <div
      role="button"
      tabIndex={0}
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      className={`h-12 w-12 flex items-center justify-center text-text-muted transition-colors relative cursor-pointer hover:text-text hover:bg-surface-hover focus:outline-none focus:bg-surface-hover focus:text-text ${
        isActive ? 'text-text bg-surface-hover font-semibold' : 'font-normal'
      }`.trim()}
      title="Settings"
      aria-label="Settings"
      aria-current={isActive ? 'page' : undefined}
    >
      {isActive && (
        <div
          className={`absolute top-1/2 -translate-y-1/2 h-6 w-0.5 bg-accent ${
            position === 'left' ? 'left-0.5' : 'right-0.5'
          }`.trim()}
          aria-hidden="true"
        />
      )}
      <div className="tab-icon [&_svg]:stroke-1">
        <SettingsIcon size={16} />
      </div>
    </div>
  )
}

export default SettingsButton

EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ sidebar-components components created successfully!"
