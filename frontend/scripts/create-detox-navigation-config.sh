# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:16.969Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/config
# Target OS: cross-platform
# Directories: 0
# Files: 2
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create navigationConfig.tsx
cat > "src/config/navigationConfig.tsx" << 'EOF'
import * as React from 'react'
import type { NavigationItem, NavigationConfig } from '@/types/navigation'
import { createIconElement } from '@/utils/iconUtils'

const getPageModules = () => import.meta.glob('../pages/**/[A-Z]*Page.tsx', { eager: true })

const getPanelModules = () => import.meta.glob('../pages/**/[A-Z]*Panel.tsx', { eager: true })

let cachedNavigationItems: NavigationItem[] | null = null

const buildNavigationItems = (): NavigationItem[] => {
  if (cachedNavigationItems) {
    return cachedNavigationItems
  }

  const pageModules = getPageModules()
  const panelModules = getPanelModules()
  
  cachedNavigationItems = Object.entries(pageModules)
  .map(([pagePath, pageModule]) => {
    const folderMatch = pagePath.match(/\/pages\/([^/]+)\//)
    let folderName = folderMatch?.[1]

    if (!folderName) {
      const fileMatch = pagePath.match(/\/pages\/([^/]+)\.tsx$/)
      folderName = fileMatch?.[1]?.replace('Page', '').toLowerCase()
    }

    const typedPageModule = pageModule as {
      navigationConfig?: NavigationConfig
      default?: React.ComponentType<unknown>
    }

    if (!typedPageModule?.navigationConfig || !folderName || !typedPageModule?.default) {
      return null
    }

    const panelPath = Object.keys(panelModules).find(
      (path) => path.includes(`/pages/${folderName}/`) && path.includes('Panel.tsx'),
    )

    const panelModule = panelPath
      ? (panelModules[panelPath] as { default?: React.ComponentType<unknown> })
      : null

    return {
      ...typedPageModule.navigationConfig,
      page: typedPageModule.default,
      panel: panelModule?.default || undefined,
    } as NavigationItem
  })
    .filter((item): item is NavigationItem => item !== null)
    .sort((a, b) => (a.order || 999) - (b.order || 999))

  return cachedNavigationItems
}

export const getNavigationItem = (id: string): NavigationItem | undefined => {
  return buildNavigationItems().find((item) => item.id === id)
}

export const getAllNavigationItems = (): NavigationItem[] => {
  return buildNavigationItems()
}

export const getSidebarItems = (): NavigationItem[] => {
  return buildNavigationItems().filter((item) => item.showInSidebar)
}

export const getPageComponent = (id: string): React.ComponentType<unknown> | undefined => {
  const item = getNavigationItem(id)
  return item?.page
}

export const getPanelComponent = (id: string): React.ComponentType<unknown> | undefined => {
  const item = getNavigationItem(id)
  return item?.panel
}

export const getIcon = (id: string, size: number): React.ReactElement | null => {
  const item = getNavigationItem(id)
  if (item?.iconComponent) {
    return createIconElement(item.iconComponent, size)
  }
  const panelModules = getPanelModules()
  const panelItem = panelModules[
    `../pages/${id.replace('-panel', '')}/${
      id.charAt(0).toUpperCase() + id.slice(1).replace('-panel', '')
    }Panel.tsx`
  ] as { navigationConfig?: NavigationConfig }
  if (panelItem?.navigationConfig?.iconComponent) {
    return createIconElement(panelItem.navigationConfig.iconComponent, size)
  }
  return null
}

export const getTabIcon = (id: string): React.ReactElement | null => {
  return getIcon(id, 12)
}

export const getSidebarIcon = (id: string): React.ReactElement | null => {
  return getIcon(id, 16)
}

export const getPageIcon = (id: string, className?: string): React.ReactElement | null => {
  const item = getNavigationItem(id)
  if (item?.iconComponent) {
    return createIconElement(item.iconComponent, className || 'w-5 h-5')
  }
  return getIcon(id, 20)
}

export const getTabTitle = (id: string): string => {
  const item = getNavigationItem(id)
  return item?.label || id
}

EOF

# Create welcomeFeatures.ts
cat > "src/config/welcomeFeatures.ts" << 'EOF'
import { FileText, Wrench, Play, Zap } from 'lucide-react'

/**
 * Welcome page features configuration
 * Follows architecture guide principles:
 * - Single responsibility: Feature definitions
 * - Separation of data from UI logic
 * - Centralized configuration
 */

export interface WelcomeFeature {
  id: string
  icon: typeof FileText
  title: string
  description: string
  longDescription: string
  action: (handleOpenTab: (tabId: string, tabName: string) => void) => void
  stepIcon: typeof Play
  ariaLabel: string
  steps: string[]
}

export const getWelcomeFeatures = (handleOpenTab: (tabId: string, tabName: string) => void): WelcomeFeature[] => [
  {
    id: 'task-generator',
    icon: FileText,
    title: 'Task Generator',
    description: 'Generate detailed task files with source code for project documentation and workflows',
    longDescription: 'Analyze project directories and automatically create comprehensive task documentation files. Perfect for code reviews, project handoffs, and technical documentation.',
    action: () => handleOpenTab('tasks', 'Task Generator'),
    stepIcon: Play,
    ariaLabel: 'Task Generator - Create comprehensive documentation from your project files',
    steps: [
      'Select your project directory',
      'Configure generation settings', 
      'Generate comprehensive task files',
      'Export documentation'
    ]
  },
  {
    id: 'scaffold-generator',
    icon: Wrench,
    title: 'Scaffold Generator',
    description: 'Generate cross-platform scripts to recreate directory structures and project templates',
    longDescription: 'Convert existing project structures into executable scaffold scripts. Create reproducible project templates for any platform.',
    action: () => handleOpenTab('scaffold', 'Scaffold Generator'),
    stepIcon: Zap,
    ariaLabel: 'Scaffold Generator - Create project template scripts from existing structures',
    steps: [
      'Select source directory structure',
      'Configure script format & options',
      'Generate scaffold scripts',
      'Export executable templates'
    ]
  },
]
EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"#!/bin/bash

#============================================================================
# Detox Tool Component Generator Script
# Category: navigation-config
# Description: Navigation configuration and auto-discovery system
# Generated by: Task-Writer ScaffoldGenerator
# Implementation Phases: 2, 3
#============================================================================

# Create target directory structure
mkdir -p src/components/layout
mkdir -p src/components/ui
mkdir -p src/components/shared/forms
mkdir -p src/components/shared/generators
mkdir -p src/hooks
mkdir -p src/services
mkdir -p src/config
mkdir -p src/types

echo "üöÄ Creating navigation-config for detox-tool..."
echo "üìÅ Target: ./src/"
echo ""

