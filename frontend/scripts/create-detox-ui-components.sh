# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:16.873Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/ui
# Target OS: cross-platform
# Directories: 0
# Files: 15
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create Button.tsx
cat > "src/components/ui/Button.tsx" << 'EOF'
import React from 'react'
import { Loader2 } from 'lucide-react'
import { clsx } from 'clsx'

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive'
  size?: 'sm' | 'md' | 'lg'
  loading?: boolean
  leftIcon?: React.ReactNode
  rightIcon?: React.ReactNode
  fullWidth?: boolean
}

const buttonVariants = {
  primary: [
    'bg-accent text-white border-accent',
    'hover:bg-accent-hover hover:border-accent-hover',
    'focus:ring-2 focus:ring-accent/20',
    'disabled:bg-gray-300 disabled:border-gray-300 disabled:text-gray-500',
  ].join(' '),
  
  secondary: [
    'bg-surface text-text border-border',
    'hover:bg-surface-hover',
    'focus:ring-2 focus:ring-accent/20',
    'disabled:bg-gray-100 disabled:text-gray-400',
  ].join(' '),
  
  outline: [
    'bg-transparent text-text border-border',
    'hover:bg-surface-hover',
    'focus:ring-2 focus:ring-accent/20',
    'disabled:text-gray-400 disabled:border-gray-200',
  ].join(' '),
  
  ghost: [
    'bg-transparent text-text border-transparent',
    'hover:bg-surface-hover',
    'focus:ring-2 focus:ring-accent/20',
    'disabled:text-gray-400',
  ].join(' '),
  
  destructive: [
    'bg-red-500 text-white border-red-500',
    'hover:bg-red-600 hover:border-red-600',
    'focus:ring-2 focus:ring-red-500/20',
    'disabled:bg-red-300 disabled:border-red-300',
  ].join(' '),
}

const buttonSizes = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-sm',
  lg: 'px-6 py-3 text-base',
}

export const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  loading = false,
  leftIcon,
  rightIcon,
  fullWidth = false,
  className,
  disabled,
  ...props
}) => {
  const isDisabled = disabled || loading

  return (
    <button
      className={clsx(
        // Base styles
        'inline-flex items-center justify-center font-medium border rounded-md',
        'transition-all duration-200 ease-in-out',
        'focus:outline-none focus:ring-offset-2 focus:ring-offset-background',
        'disabled:cursor-not-allowed',
        'hover:scale-105 active:scale-95',
        
        // Variant styles
        buttonVariants[variant],
        
        // Size styles
        buttonSizes[size],
        
        // Width
        fullWidth && 'w-full',
        
        // Custom className
        className
      )}
      disabled={isDisabled}
      {...props}
    >
      {loading && (
        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
      )}
      
      {!loading && leftIcon && (
        <span className="mr-2 flex-shrink-0">{leftIcon}</span>
      )}
      
      <span className="truncate">{children}</span>
      
      {!loading && rightIcon && (
        <span className="ml-2 flex-shrink-0">{rightIcon}</span>
      )}
    </button>
  )
}

// Button group component for related actions
interface ButtonGroupProps {
  children: React.ReactNode
  className?: string
  orientation?: 'horizontal' | 'vertical'
}

export const ButtonGroup: React.FC<ButtonGroupProps> = ({
  children,
  className,
  orientation = 'horizontal'
}) => {
  return (
    <div
      className={clsx(
        'inline-flex',
        orientation === 'horizontal' ? 'flex-row' : 'flex-col',
        '[&>button]:rounded-none',
        '[&>button:first-child]:rounded-l-md',
        '[&>button:last-child]:rounded-r-md',
        orientation === 'vertical' && [
          '[&>button:first-child]:rounded-t-md [&>button:first-child]:rounded-l-none',
          '[&>button:last-child]:rounded-b-md [&>button:last-child]:rounded-r-none'
        ],
        '[&>button:not(:first-child)]:border-l-0',
        orientation === 'vertical' && '[&>button:not(:first-child)]:border-l [&>button:not(:first-child)]:border-t-0',
        className
      )}
    >
      {children}
    </div>
  )
}
EOF

# Create Card.tsx
cat > "src/components/ui/Card.tsx" << 'EOF'
import React from 'react'
import { clsx } from 'clsx'

interface CardProps {
  children: React.ReactNode
  className?: string
  variant?: 'default' | 'elevated' | 'outlined' | 'glass'
  padding?: 'none' | 'sm' | 'md' | 'lg'
  interactive?: boolean
  onClick?: () => void
}

const cardVariants = {
  default: 'bg-surface border border-border',
  elevated: 'bg-surface shadow-lg border border-border/50',
  outlined: 'bg-transparent border-2 border-border',
  glass: 'bg-surface/80 backdrop-blur-md border border-border/30 shadow-xl',
}

const cardPadding = {
  none: '',
  sm: 'p-3',
  md: 'p-4',
  lg: 'p-6',
}

export const Card: React.FC<CardProps> = ({
  children,
  className,
  variant = 'default',
  padding = 'md',
  interactive = false,
  onClick,
}) => {
  const Component = 'div'

  return (
    <Component
      className={clsx(
        'rounded-lg transition-all duration-200',
        cardVariants[variant],
        cardPadding[padding],
        interactive && 'cursor-pointer hover:shadow-md hover:scale-105',
        onClick && 'cursor-pointer hover:scale-105',
        className
      )}
      onClick={onClick}
    >
      {children}
    </Component>
  )
}

interface CardHeaderProps {
  children: React.ReactNode
  className?: string
}

export const CardHeader: React.FC<CardHeaderProps> = ({ children, className }) => {
  return (
    <div className={clsx('pb-3 border-b border-border/50', className)}>
      {children}
    </div>
  )
}

interface CardTitleProps {
  children: React.ReactNode
  className?: string
  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'
}

export const CardTitle: React.FC<CardTitleProps> = ({ 
  children, 
  className, 
  as: Component = 'h3' 
}) => {
  return (
    <Component className={clsx('text-lg font-semibold text-text', className)}>
      {children}
    </Component>
  )
}

interface CardDescriptionProps {
  children: React.ReactNode
  className?: string
}

export const CardDescription: React.FC<CardDescriptionProps> = ({ 
  children, 
  className 
}) => {
  return (
    <p className={clsx('text-sm text-text-muted mt-1', className)}>
      {children}
    </p>
  )
}

interface CardContentProps {
  children: React.ReactNode
  className?: string
}

export const CardContent: React.FC<CardContentProps> = ({ children, className }) => {
  return (
    <div className={clsx('pt-3', className)}>
      {children}
    </div>
  )
}

interface CardFooterProps {
  children: React.ReactNode
  className?: string
}

export const CardFooter: React.FC<CardFooterProps> = ({ children, className }) => {
  return (
    <div className={clsx('pt-3 border-t border-border/50 mt-3', className)}>
      {children}
    </div>
  )
}
EOF

# Create DirectoryBrowser.tsx
cat > "src/components/ui/DirectoryBrowser.tsx" << 'EOF'
import React, { useState } from 'react'
import {
  Folder,
  FolderOpen,
  File,
  ChevronRight,
  ChevronDown,
  Home,
  Search,
  ArrowLeft,
  ArrowUp,
  MoreHorizontal
} from 'lucide-react'
import { Button } from '@/components/ui/Button'

interface DirectoryItem {
  name: string
  path: string
  type: 'folder' | 'file'
  children?: DirectoryItem[]
  expanded?: boolean
}

interface DirectoryBrowserProps {
  selectedPath?: string
  onSelectDirectory: () => void
  className?: string
}

/**
 * Professional directory browser that mimics VS Code file explorer
 * Shows hierarchical folder structure with navigation
 */
const DirectoryBrowser: React.FC<DirectoryBrowserProps> = ({
  selectedPath,
  onSelectDirectory,
  className = ''
}) => {
  const [currentPath, setCurrentPath] = useState('/')
  const [searchTerm, setSearchTerm] = useState('')
  
  // Mock directory structure
  const mockDirectories: DirectoryItem[] = [
    {
      name: 'Users',
      path: '/Users',
      type: 'folder',
      expanded: true,
      children: [
        {
          name: 'username',
          path: '/Users/username',
          type: 'folder',
          expanded: true,
          children: [
            { name: 'Desktop', path: '/Users/username/Desktop', type: 'folder' },
            { name: 'Documents', path: '/Users/username/Documents', type: 'folder' },
            { name: 'Downloads', path: '/Users/username/Downloads', type: 'folder' },
            { name: 'Projects', path: '/Users/username/Projects', type: 'folder' }
          ]
        }
      ]
    },
    {
      name: 'Applications',
      path: '/Applications',
      type: 'folder'
    },
    {
      name: 'System',
      path: '/System', 
      type: 'folder'
    }
  ]

  const quickAccess = [
    { name: 'Desktop', path: '/Users/username/Desktop', icon: Folder },
    { name: 'Documents', path: '/Users/username/Documents', icon: Folder },
    { name: 'Downloads', path: '/Users/username/Downloads', icon: Folder },
    { name: 'Projects', path: '/Users/username/Projects', icon: Folder }
  ]

  const breadcrumbParts = currentPath.split('/').filter(Boolean)

  const renderDirectoryTree = (items: DirectoryItem[], level = 0) => {
    return items.map((item, index) => (
      <div key={index} className="select-none">
        <div 
          className={`flex items-center gap-1 py-1 px-2 hover:bg-surface-hover cursor-pointer rounded group ${
            selectedPath === item.path ? 'bg-accent/20 text-accent' : 'text-text'
          }`}
          style={{ paddingLeft: `${8 + level * 16}px` }}
          onClick={() => item.type === 'folder' && setCurrentPath(item.path)}
        >
          {item.type === 'folder' && (
            <button className="p-0.5 hover:bg-surface rounded">
              {item.expanded ? (
                <ChevronDown className="w-3 h-3" />
              ) : (
                <ChevronRight className="w-3 h-3" />
              )}
            </button>
          )}
          {item.type === 'folder' ? (
            item.expanded ? (
              <FolderOpen className="w-4 h-4 text-accent" />
            ) : (
              <Folder className="w-4 h-4 text-accent" />
            )
          ) : (
            <File className="w-4 h-4 text-text-muted" />
          )}
          <span className="text-sm truncate">{item.name}</span>
        </div>
        {item.expanded && item.children && (
          <div>
            {renderDirectoryTree(item.children, level + 1)}
          </div>
        )}
      </div>
    ))
  }

  return (
    <div className={`flex h-80 app-border rounded-lg overflow-hidden bg-surface ${className}`}>
      {/* Sidebar */}
      <div className="w-48 bg-background app-border-r flex flex-col">
        {/* Quick Access */}
        <div className="p-3 app-border-b">
          <p className="text-xs font-medium text-text-muted uppercase tracking-wide mb-2">
            Quick Access
          </p>
          <div className="space-y-1">
            {quickAccess.map((item, index) => (
              <button
                key={index}
                className="flex items-center gap-2 w-full p-1.5 rounded hover:bg-surface text-left"
                onClick={() => setCurrentPath(item.path)}
              >
                <item.icon className="w-4 h-4 text-accent" />
                <span className="text-sm text-text truncate">{item.name}</span>
              </button>
            ))}
          </div>
        </div>
        
        {/* Directory Tree */}
        <div className="flex-1 overflow-auto p-2">
          <div className="space-y-0.5">
            {renderDirectoryTree(mockDirectories)}
          </div>
        </div>
      </div>

      {/* Main Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-gradient-to-r from-surface to-background p-3 app-border-b">
          {/* Navigation */}
          <div className="flex items-center gap-2 mb-2">
            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
              <ArrowLeft className="w-3 h-3" />
            </Button>
            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
              <ArrowUp className="w-3 h-3" />
            </Button>
            <div className="h-4 w-px bg-border mx-1" />
            
            {/* Breadcrumb */}
            <div className="flex items-center gap-1 flex-1 text-sm">
              <Home className="w-4 h-4 text-text-muted" />
              {breadcrumbParts.map((part, index) => (
                <React.Fragment key={index}>
                  <ChevronRight className="w-3 h-3 text-text-muted" />
                  <button 
                    className="text-text hover:text-accent"
                    onClick={() => setCurrentPath('/' + breadcrumbParts.slice(0, index + 1).join('/'))}
                  >
                    {part}
                  </button>
                </React.Fragment>
              ))}
            </div>
            
            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
              <MoreHorizontal className="w-3 h-3" />
            </Button>
          </div>
          
          {/* Search */}
          <div className="relative">
            <Search className="absolute left-2 top-1/2 -translate-y-1/2 w-3 h-3 text-text-muted" />
            <input
              type="text"
              placeholder="Search..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full h-7 pl-7 pr-3 text-sm bg-background app-border rounded focus:outline-none focus:ring-1 focus:ring-accent"
            />
          </div>
        </div>

        {/* Content Area */}
        <div className="flex-1 p-3">
          {selectedPath ? (
            <div className="text-center space-y-3">
              <div className="p-4 bg-accent/10 app-border rounded-lg">
                <FolderOpen className="w-8 h-8 text-accent mx-auto mb-2" />
                <p className="text-sm font-medium text-text">Directory Selected</p>
                <p className="text-xs text-text-muted font-mono">{selectedPath}</p>
              </div>
              <Button onClick={onSelectDirectory} variant="primary" size="sm">
                Use This Directory
              </Button>
            </div>
          ) : (
            <div className="text-center text-text-muted py-8">
              <Folder className="w-12 h-12 mx-auto mb-3 opacity-50" />
              <p className="text-sm">Navigate to a directory and click to select</p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default DirectoryBrowser
EOF

# Create DirectoryPicker.tsx
cat > "src/components/ui/DirectoryPicker.tsx" << 'EOF'
import React, { useState } from 'react'
import { FolderOpen, Folder, ChevronRight, HardDrive, Home, FileText } from 'lucide-react'
import { motion, useReducedMotion } from 'framer-motion'
import { cn } from '@/lib/utils'

interface DirectoryPickerProps {
  selectedPath?: string
  placeholder?: string
  onSelectDirectory: () => void
  disabled?: boolean
  className?: string
  variant?: 'primary' | 'secondary'
  showPreview?: boolean
  label?: string
  description?: string
}

/**
 * Professional directory picker component for desktop applications
 * Features:
 * - Modern desktop-like file browser appearance
 * - Breadcrumb-style path display
 * - Hover animations and visual feedback
 * - Professional typography and spacing
 * - Theme-aware styling
 */
export const DirectoryPicker: React.FC<DirectoryPickerProps> = ({
  selectedPath,
  placeholder = "No directory selected",
  onSelectDirectory,
  disabled = false,
  className,
  variant = 'primary',
  showPreview = true,
  label,
  description,
}) => {
  const [isHovered, setIsHovered] = useState(false)
  const prefersReducedMotion = useReducedMotion()

  // Parse path into breadcrumb segments
  const pathSegments = selectedPath ? selectedPath.split(/[/\\]/).filter(Boolean) : []
  
  // Determine icon based on path
  const getPathIcon = (segment: string, index: number) => {
    if (index === 0 && (segment.endsWith(':') || segment === '')) {
      return <HardDrive className="w-4 h-4" />
    }
    if (segment === 'Users' || segment === 'home') {
      return <Home className="w-4 h-4" />
    }
    return <Folder className="w-4 h-4" />
  }

  const buttonVariants = {
    primary: cn(
      'bg-surface border-2 border-border text-text',
      'hover:border-accent hover:bg-surface-hover',
      'focus:border-accent focus:ring-2 focus:ring-accent/20',
      'disabled:bg-surface disabled:border-border disabled:text-text-muted disabled:cursor-not-allowed'
    ),
    secondary: cn(
      'bg-background border-2 border-dashed border-border text-text-muted',
      'hover:border-accent hover:text-text hover:bg-surface',
      'focus:border-accent focus:ring-2 focus:ring-accent/20',
      'disabled:bg-background disabled:border-border disabled:text-text-muted disabled:cursor-not-allowed'
    )
  }

  const animationVariants = {
    initial: { scale: 1 },
    hover: prefersReducedMotion ? {} : { scale: 1.02 },
    tap: prefersReducedMotion ? {} : { scale: 0.98 }
  }

  return (
    <div className={cn('space-y-3', className)}>
      {/* Label */}
      {label && (
        <div className="space-y-1">
          <label className="text-sm font-medium text-text">{label}</label>
          {description && (
            <p className="text-xs text-text-muted">{description}</p>
          )}
        </div>
      )}

      {/* Directory Picker Button */}
      <motion.button
        variants={animationVariants}
        initial="initial"
        whileHover={!disabled ? "hover" : undefined}
        whileTap={!disabled ? "tap" : undefined}
        onHoverStart={() => setIsHovered(true)}
        onHoverEnd={() => setIsHovered(false)}
        onClick={onSelectDirectory}
        disabled={disabled}
        className={cn(
          'relative w-full p-4 rounded-lg transition-all duration-200',
          'focus:outline-none focus:ring-offset-2 focus:ring-offset-background',
          'group',
          buttonVariants[variant]
        )}
        aria-label={selectedPath ? `Selected directory: ${selectedPath}` : "Choose directory"}
      >
        {/* Main Content */}
        <div className="flex items-center gap-3">
          {/* Icon */}
          <div className={cn(
            'p-2 rounded-md transition-all duration-200',
            selectedPath ? 'bg-accent/10 text-accent' : 'bg-surface text-text-muted',
            'group-hover:bg-accent/20 group-hover:text-accent'
          )}>
            <FolderOpen className={cn(
              'w-5 h-5 transition-transform duration-200',
              isHovered && !disabled && 'scale-110'
            )} />
          </div>

          {/* Content */}
          <div className="flex-1 text-left">
            {selectedPath ? (
              <div className="space-y-1">
                {/* Path Breadcrumbs */}
                <div className="flex items-center gap-1 text-sm font-medium text-text">
                  {pathSegments.length > 3 ? (
                    <>
                      {getPathIcon(pathSegments[0], 0)}
                      <span className="truncate">{pathSegments[0]}</span>
                      <ChevronRight className="w-3 h-3 text-text-muted flex-shrink-0" />
                      <span className="text-text-muted">...</span>
                      <ChevronRight className="w-3 h-3 text-text-muted flex-shrink-0" />
                      {pathSegments.slice(-2).map((segment, index) => (
                        <React.Fragment key={index}>
                          {getPathIcon(segment, pathSegments.length - 2 + index)}
                          <span className="truncate">{segment}</span>
                          {index < 1 && <ChevronRight className="w-3 h-3 text-text-muted flex-shrink-0" />}
                        </React.Fragment>
                      ))}
                    </>
                  ) : (
                    pathSegments.map((segment, index) => (
                      <React.Fragment key={index}>
                        {getPathIcon(segment, index)}
                        <span className="truncate">{segment}</span>
                        {index < pathSegments.length - 1 && (
                          <ChevronRight className="w-3 h-3 text-text-muted flex-shrink-0" />
                        )}
                      </React.Fragment>
                    ))
                  )}
                </div>
                
                {/* Full Path */}
                <div className="text-xs text-text-muted font-mono truncate">
                  {selectedPath}
                </div>
              </div>
            ) : (
              <div className="space-y-1">
                <div className="text-sm font-medium text-text-muted">
                  {placeholder}
                </div>
                <div className="text-xs text-text-muted">
                  Click to browse and select a directory
                </div>
              </div>
            )}
          </div>

          {/* Arrow Indicator */}
          <div className={cn(
            'p-1 rounded transition-all duration-200',
            'group-hover:bg-accent/10',
            disabled && 'opacity-50'
          )}>
            <ChevronRight className={cn(
              'w-4 h-4 text-text-muted transition-transform duration-200',
              'group-hover:text-accent group-hover:translate-x-0.5'
            )} />
          </div>
        </div>

        {/* Hover Overlay */}
        <div className={cn(
          'absolute inset-0 rounded-lg bg-accent/5 opacity-0 transition-opacity duration-200',
          'group-hover:opacity-100 pointer-events-none'
        )} />
      </motion.button>

      {/* Directory Info Preview */}
      {showPreview && selectedPath && (
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          className="p-3 bg-surface/50 border border-border rounded-md"
        >
          <div className="flex items-center gap-2 text-sm text-text-muted">
            <FileText className="w-4 h-4" />
            <span>Directory selected and ready for analysis</span>
          </div>
        </motion.div>
      )}
    </div>
  )
}

export default DirectoryPicker
EOF

# Create DragDropList.tsx
cat > "src/components/ui/DragDropList.tsx" << 'EOF'
import React, { useState, useCallback } from 'react'
import { GripVertical, Folder, File } from 'lucide-react'

export interface DragDropItem {
  id: string
  name: string
  type: 'file' | 'directory'
  path: string
  children?: DragDropItem[]
  isExpanded?: boolean
  order: number
  groupId?: string
}

export interface DragDropGroup {
  id: string
  name: string
  items: DragDropItem[]
  order: number
  enabled: boolean
}

interface DragDropListProps {
  items: DragDropItem[]
  groups: DragDropGroup[]
  onItemsReorder: (items: DragDropItem[]) => void
  onGroupsReorder: (groups: DragDropGroup[]) => void
  onGroupToggle: (groupId: string, enabled: boolean) => void
  onGroupRename: (groupId: string, name: string) => void
  maxHeight?: string
  className?: string
}

export const DragDropList: React.FC<DragDropListProps> = ({
  items,
  groups,
  onItemsReorder,
  onGroupsReorder,
  onGroupToggle,
  onGroupRename,
  maxHeight = '400px',
  className = '',
}) => {
  const [draggedItem, setDraggedItem] = useState<string | null>(null)
  const [draggedGroup, setDraggedGroup] = useState<string | null>(null)
  const [dragOverTarget, setDragOverTarget] = useState<string | null>(null)
  const [editingGroup, setEditingGroup] = useState<string | null>(null)
  const [editingName, setEditingName] = useState('')

  const handleItemDragStart = useCallback((e: React.DragEvent, itemId: string) => {
    setDraggedItem(itemId)
    e.dataTransfer.effectAllowed = 'move'
  }, [])

  const handleGroupDragStart = useCallback((e: React.DragEvent, groupId: string) => {
    setDraggedGroup(groupId)
    e.dataTransfer.effectAllowed = 'move'
  }, [])

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    e.dataTransfer.dropEffect = 'move'
  }, [])

  const handleItemDragEnter = useCallback((e: React.DragEvent, targetId: string) => {
    e.preventDefault()
    if (draggedItem && draggedItem !== targetId) {
      setDragOverTarget(targetId)
    }
  }, [draggedItem])

  const handleGroupDragEnter = useCallback((e: React.DragEvent, targetId: string) => {
    e.preventDefault()
    if (draggedGroup && draggedGroup !== targetId) {
      setDragOverTarget(targetId)
    }
  }, [draggedGroup])

  const handleItemDrop = useCallback((e: React.DragEvent, targetId: string) => {
    e.preventDefault()
    if (!draggedItem || draggedItem === targetId) return

    const newItems = [...items]
    const draggedIndex = newItems.findIndex(item => item.id === draggedItem)
    const targetIndex = newItems.findIndex(item => item.id === targetId)

    if (draggedIndex !== -1 && targetIndex !== -1) {
      const [draggedItemObj] = newItems.splice(draggedIndex, 1)
      newItems.splice(targetIndex, 0, draggedItemObj)
      
      // Update order values
      newItems.forEach((item, index) => {
        item.order = index
      })
      
      onItemsReorder(newItems)
    }

    setDraggedItem(null)
    setDragOverTarget(null)
  }, [items, draggedItem, onItemsReorder])

  const handleGroupDrop = useCallback((e: React.DragEvent, targetId: string) => {
    e.preventDefault()
    if (!draggedGroup || draggedGroup === targetId) return

    const newGroups = [...groups]
    const draggedIndex = newGroups.findIndex(group => group.id === draggedGroup)
    const targetIndex = newGroups.findIndex(group => group.id === targetId)

    if (draggedIndex !== -1 && targetIndex !== -1) {
      const [draggedGroupObj] = newGroups.splice(draggedIndex, 1)
      newGroups.splice(targetIndex, 0, draggedGroupObj)
      
      // Update order values
      newGroups.forEach((group, index) => {
        group.order = index
      })
      
      onGroupsReorder(newGroups)
    }

    setDraggedGroup(null)
    setDragOverTarget(null)
  }, [groups, draggedGroup, onGroupsReorder])

  const handleDragEnd = useCallback(() => {
    setDraggedItem(null)
    setDraggedGroup(null)
    setDragOverTarget(null)
  }, [])

  const startGroupEdit = useCallback((group: DragDropGroup) => {
    setEditingGroup(group.id)
    setEditingName(group.name)
  }, [])

  const handleGroupNameSubmit = useCallback(() => {
    if (editingGroup && editingName.trim()) {
      onGroupRename(editingGroup, editingName.trim())
    }
    setEditingGroup(null)
    setEditingName('')
  }, [editingGroup, editingName, onGroupRename])

  const handleGroupNameKeyDown = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleGroupNameSubmit()
    } else if (e.key === 'Escape') {
      setEditingGroup(null)
      setEditingName('')
    }
  }, [handleGroupNameSubmit])

  const renderItem = (item: DragDropItem) => (
    <div
      key={item.id}
      draggable
      onDragStart={(e) => handleItemDragStart(e, item.id)}
      onDragOver={handleDragOver}
      onDragEnter={(e) => handleItemDragEnter(e, item.id)}
      onDrop={(e) => handleItemDrop(e, item.id)}
      onDragEnd={handleDragEnd}
      className={`
        flex items-center gap-2 p-2 rounded border transition-colors cursor-move
        ${draggedItem === item.id ? 'opacity-50' : ''}
        ${dragOverTarget === item.id ? 'border-accent bg-accent/10' : 'border-border hover:bg-surface-hover'}
      `}
    >
      <GripVertical className="w-4 h-4 text-text-muted" />
      {item.type === 'directory' ? (
        <Folder className="w-4 h-4 text-accent" />
      ) : (
        <File className="w-4 h-4 text-text-muted" />
      )}
      <span className="text-sm text-text flex-1 min-w-0 truncate">{item.name}</span>
    </div>
  )

  const renderGroup = (group: DragDropGroup) => (
    <div
      key={group.id}
      className={`border border-border rounded-lg ${group.enabled ? 'bg-surface' : 'bg-surface-hover opacity-60'}`}
    >
      <div
        draggable
        onDragStart={(e) => handleGroupDragStart(e, group.id)}
        onDragOver={handleDragOver}
        onDragEnter={(e) => handleGroupDragEnter(e, group.id)}
        onDrop={(e) => handleGroupDrop(e, group.id)}
        onDragEnd={handleDragEnd}
        className={`
          flex items-center gap-2 p-3 rounded-t-lg cursor-move transition-colors
          ${draggedGroup === group.id ? 'opacity-50' : ''}
          ${dragOverTarget === group.id ? 'border-accent bg-accent/10' : 'hover:bg-surface-hover'}
        `}
      >
        <GripVertical className="w-4 h-4 text-text-muted" />
        <input
          type="checkbox"
          checked={group.enabled}
          onChange={(e) => onGroupToggle(group.id, e.target.checked)}
          className="rounded border-border"
        />
        
        {editingGroup === group.id ? (
          <input
            type="text"
            value={editingName}
            onChange={(e) => setEditingName(e.target.value)}
            onBlur={handleGroupNameSubmit}
            onKeyDown={handleGroupNameKeyDown}
            className="flex-1 px-2 py-1 text-sm bg-input-bg border border-border rounded text-text"
            autoFocus
          />
        ) : (
          <span
            className="flex-1 text-sm font-medium text-text cursor-pointer"
            onDoubleClick={() => startGroupEdit(group)}
          >
            {group.name}
          </span>
        )}
        
        <span className="text-xs text-text-muted">
          {group.items.length} items
        </span>
      </div>
      
      {group.enabled && (
        <div className="p-2 space-y-1">
          {group.items.map(renderItem)}
        </div>
      )}
    </div>
  )

  return (
    <div className={`space-y-4 ${className}`} style={{ maxHeight, overflowY: 'auto' }}>
      {/* Ungrouped Items */}
      {items.filter(item => !item.groupId).length > 0 && (
        <div>
          <h4 className="text-sm font-medium text-text-muted mb-2">Ungrouped Files</h4>
          <div className="space-y-1">
            {items
              .filter(item => !item.groupId)
              .sort((a, b) => a.order - b.order)
              .map(renderItem)}
          </div>
        </div>
      )}

      {/* Groups */}
      {groups
        .sort((a, b) => a.order - b.order)
        .map(renderGroup)}
    </div>
  )
}

export default DragDropList
EOF

# Create ErrorBanner.tsx
cat > "src/components/ui/ErrorBanner.tsx" << 'EOF'
import React from 'react'
import { AlertTriangle, Info, AlertCircle, X } from 'lucide-react'
import { useError } from '@/contexts/ErrorContext'
import type { ErrorType } from '@/contexts/ErrorContext'

interface ErrorBannerProps {
  className?: string
}

/**
 * Simple error banner following the design system
 * Shows one persistent error at a time in a clean, minimal way
 */
export const ErrorBanner: React.FC<ErrorBannerProps> = ({ className = '' }) => {
  const { getPersistentErrors, removeError } = useError()
  const persistentErrors = getPersistentErrors()

  // Show only the most recent error
  if (persistentErrors.length === 0) {
    return null
  }

  const error = persistentErrors[persistentErrors.length - 1]

  const getIcon = (type: ErrorType) => {
    switch (type) {
      case 'error': return AlertCircle
      case 'warning': return AlertTriangle  
      case 'info': return Info
      default: return AlertTriangle
    }
  }

  const getStyles = (type: ErrorType) => {
    switch (type) {
      case 'error':
        return 'bg-status-error-bg text-text border-status-error'
      case 'warning':
        return 'bg-status-warning-bg text-text border-status-warning'
      case 'info':
        return 'bg-status-info-bg text-text border-status-info'
      default:
        return 'bg-surface text-text border-border'
    }
  }

  const getIconStyles = (type: ErrorType) => {
    switch (type) {
      case 'error':
        return 'text-status-error'
      case 'warning':
        return 'text-status-warning'
      case 'info':
        return 'text-status-info'
      default:
        return 'text-text-muted'
    }
  }

  const Icon = getIcon(error.type)

  return (
    <div className={`${getStyles(error.type)} border-b px-4 py-3 ${className}`}>
      <div className="flex items-start gap-3">
        <Icon className={`w-5 h-5 mt-0.5 flex-shrink-0 ${getIconStyles(error.type)}`} />
        <div className="flex-1 min-w-0">
          <div className="font-medium text-sm">{error.title}</div>
          {error.message && (
            <div className="text-sm mt-1 opacity-90">{error.message}</div>
          )}
        </div>
        {error.dismissible && (
          <button
            onClick={() => removeError(error.id)}
            className={`flex-shrink-0 p-1 hover:opacity-70 transition-opacity ${getIconStyles(error.type)}`}
            aria-label="Dismiss"
          >
            <X className="w-4 h-4" />
          </button>
        )}
      </div>
    </div>
  )
}

export default ErrorBanner
EOF

# Create FilePicker.tsx
cat > "src/components/ui/FilePicker.tsx" << 'EOF'
import React from 'react'
import { motion, useReducedMotion } from 'framer-motion'
import { FolderOpen, FileText, Monitor, CheckCircle2 } from 'lucide-react'
import { Button } from '@/components/ui/Button'

interface FilePickerProps {
  type: 'directory' | 'file'
  label: string
  description?: string
  selectedPath?: string
  onSelect: () => void
  optional?: boolean
  variant?: 'input' | 'output'
  className?: string
}

/**
 * Professional file picker component for desktop applications
 * Features modern design with hover states, animations, and clear visual feedback
 */
const FilePicker: React.FC<FilePickerProps> = ({
  type,
  label,
  description,
  selectedPath,
  onSelect,
  optional = false,
  variant = 'input',
  className = '',
}) => {
  const prefersReducedMotion = useReducedMotion()
  
  const getIcon = () => {
    if (type === 'directory') {
      return variant === 'output' ? Monitor : FolderOpen
    }
    return FileText
  }
  
  const getVariantStyles = () => {
    if (variant === 'output') {
      return 'border-dashed border-accent/30 bg-accent/5'
    }
    return 'border-solid border-border bg-surface'
  }
  
  const hasSelection = Boolean(selectedPath)
  const Icon = getIcon()
  
  const containerVariants = {
    initial: prefersReducedMotion ? {} : { opacity: 0, y: 10 },
    animate: { opacity: 1, y: 0 },
    transition: prefersReducedMotion ? { duration: 0 } : { duration: 0.2 }
  }

  return (
    <motion.div
      variants={containerVariants}
      initial="initial"
      animate="animate"
      className={`group relative ${className}`}
    >
      {/* Header */}
      <div className="flex items-center gap-3 mb-3">
        <div className="page-icon">
          <Icon className="w-5 h-5 text-accent" />
        </div>
        <div className="flex-1">
          <h3 className="text-lg font-semibold text-text flex items-center gap-2">
            {label}
            {optional && (
              <span className="text-sm font-normal text-text-muted">(Optional)</span>
            )}
          </h3>
          {description && (
            <p className="text-sm text-text-muted mt-1">{description}</p>
          )}
        </div>
      </div>

      {/* File Picker Area */}
      <div
        className={`
          relative app-border rounded-lg transition-all duration-200 overflow-hidden
          ${getVariantStyles()}
          ${hasSelection ? 'border-accent' : ''}
          motion-safe:group-hover:shadow-theme motion-safe:group-hover:scale-[1.01]
        `}
      >
        {/* Selection Button */}
        <Button
          onClick={onSelect}
          variant={variant === 'output' ? 'secondary' : 'ghost'}
          size="lg"
          className="w-full h-auto p-6 justify-start gap-4 text-left rounded-lg border-0"
        >
          <div className="flex-shrink-0">
            <div className={`
              w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-200
              ${hasSelection 
                ? 'bg-accent text-white' 
                : 'bg-surface-hover text-accent group-hover:bg-accent group-hover:text-white'
              }
            `}>
              {hasSelection ? (
                <CheckCircle2 className="w-6 h-6" />
              ) : (
                <Icon className="w-6 h-6" />
              )}
            </div>
          </div>
          
          <div className="flex-1 min-w-0">
            {hasSelection ? (
              <div className="space-y-1">
                <p className="font-medium text-text">
                  {type === 'directory' ? 'Directory Selected' : 'File Selected'}
                </p>
                <p className="text-sm text-text-muted font-mono truncate">
                  {selectedPath}
                </p>
              </div>
            ) : (
              <div className="space-y-1">
                <p className="font-medium text-text">
                  Choose {type === 'directory' ? 'Directory' : 'File'}
                </p>
                <p className="text-sm text-text-muted">
                  Click to browse and select a {type}
                </p>
              </div>
            )}
          </div>
          
          <div className="flex-shrink-0">
            <div className={`
              w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200
              ${hasSelection 
                ? 'bg-accent/20 text-accent' 
                : 'bg-transparent text-text-muted group-hover:bg-accent/20 group-hover:text-accent'
              }
            `}>
              <FolderOpen className="w-4 h-4" />
            </div>
          </div>
        </Button>

        {/* Hover Effect Overlay */}
        <div className="absolute inset-0 bg-gradient-to-r from-accent/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none" />
      </div>

      {/* Selection Details (when selected) */}
      {hasSelection && (
        <motion.div
          initial={prefersReducedMotion ? {} : { opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          className="mt-3 p-3 bg-accent/10 app-border rounded-md"
        >
          <div className="flex items-center gap-2 text-sm">
            <CheckCircle2 className="w-4 h-4 text-accent flex-shrink-0" />
            <span className="text-text-muted">
              {type === 'directory' ? 'Directory' : 'File'} ready for processing
            </span>
          </div>
        </motion.div>
      )}
    </motion.div>
  )
}

export default FilePicker
EOF

# Create FilePreview.tsx
cat > "src/components/ui/FilePreview.tsx" << 'EOF'
import React, { useState } from 'react'
import { FileText, Image, Code, File, Download, Copy, Eye, EyeOff } from 'lucide-react'
import { clsx } from 'clsx'
import { Button } from './Button'

export interface PreviewFile {
  name: string
  path: string
  content: string
  language?: string
  size: number
  lastModified: Date
}

interface FilePreviewProps {
  file: PreviewFile
  className?: string
  onDownload?: (file: PreviewFile) => void
  onCopy?: (content: string) => void
  maxHeight?: string
  showActions?: boolean
}

const getFileIcon = (filename: string) => {
  const ext = filename.split('.').pop()?.toLowerCase()
  
  if (['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(ext || '')) {
    return Image
  }
  
  if (['js', 'ts', 'tsx', 'jsx', 'py', 'java', 'cs', 'cpp', 'c', 'h', 'php', 'rb', 'go', 'rs', 'swift', 'kt'].includes(ext || '')) {
    return Code
  }
  
  if (['txt', 'md', 'json', 'yaml', 'yml', 'xml', 'html', 'css', 'scss'].includes(ext || '')) {
    return FileText
  }
  
  return File
}

const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 B'
  const k = 1024
  const sizes = ['B', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]
}

const getLanguageFromExtension = (filename: string): string => {
  const ext = filename.split('.').pop()?.toLowerCase()
  const languageMap: Record<string, string> = {
    js: 'javascript',
    jsx: 'javascript',
    ts: 'typescript',
    tsx: 'typescript',
    py: 'python',
    java: 'java',
    cs: 'csharp',
    cpp: 'cpp',
    c: 'c',
    h: 'c',
    php: 'php',
    rb: 'ruby',
    go: 'go',
    rs: 'rust',
    swift: 'swift',
    kt: 'kotlin',
    html: 'html',
    css: 'css',
    scss: 'scss',
    json: 'json',
    yaml: 'yaml',
    yml: 'yaml',
    xml: 'xml',
    md: 'markdown',
  }
  return languageMap[ext || ''] || 'text'
}

export const FilePreview: React.FC<FilePreviewProps> = ({
  file,
  className,
  onDownload,
  onCopy,
  maxHeight = '500px',
  showActions = true,
}) => {
  const [isExpanded, setIsExpanded] = useState(false)
  const FileIcon = getFileIcon(file.name)
  const language = file.language || getLanguageFromExtension(file.name)
  
  const handleCopy = async () => {
    if (onCopy) {
      onCopy(file.content)
    } else {
      await navigator.clipboard.writeText(file.content)
    }
  }

  const isLongContent = file.content.split('\n').length > 20
  const displayContent = isExpanded ? file.content : file.content.split('\n').slice(0, 20).join('\n')

  return (
    <div className={clsx('bg-surface border border-border rounded-lg overflow-hidden', className)}>
      {/* Header */}
      <div className="px-4 py-3 border-b border-border bg-surface-hover">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <FileIcon className="w-5 h-5 text-accent" />
            <div>
              <h3 className="font-medium text-text">{file.name}</h3>
              <p className="text-sm text-text-muted">
                {formatFileSize(file.size)} • {file.lastModified.toLocaleDateString()}
              </p>
            </div>
          </div>
          
          {showActions && (
            <div className="flex items-center gap-2">
              {isLongContent && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsExpanded(!isExpanded)}
                  leftIcon={isExpanded ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                >
                  {isExpanded ? 'Collapse' : 'Expand'}
                </Button>
              )}
              
              <Button
                variant="ghost"
                size="sm"
                onClick={handleCopy}
                leftIcon={<Copy className="w-4 h-4" />}
              >
                Copy
              </Button>
              
              {onDownload && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onDownload(file)}
                  leftIcon={<Download className="w-4 h-4" />}
                >
                  Download
                </Button>
              )}
            </div>
          )}
        </div>
        
        {file.path && (
          <p className="text-xs text-text-muted mt-2 font-mono bg-surface px-2 py-1 rounded">
            {file.path}
          </p>
        )}
      </div>
      
      {/* Content */}
      <div 
        className="overflow-auto"
        style={{ maxHeight: isExpanded ? 'none' : maxHeight }}
      >
        <pre className={clsx(
          'p-4 text-sm font-mono text-text whitespace-pre-wrap break-words',
          'bg-code-bg border-0 m-0'
        )}>
          <code className={`language-${language}`}>
            {displayContent}
          </code>
        </pre>
        
        {isLongContent && !isExpanded && (
          <div className="px-4 pb-3">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsExpanded(true)}
              className="w-full"
            >
              Show More ({file.content.split('\n').length - 20} more lines)
            </Button>
          </div>
        )}
      </div>
    </div>
  )
}
EOF

# Create FileTree.tsx
cat > "src/components/ui/FileTree.tsx" << 'EOF'
import React, { useEffect } from 'react'
import { clsx } from 'clsx'
import { useFileTreeState } from '@/hooks/useFileTreeState'
import TreeNodeComponent from '@/components/features/filetree/TreeNodeComponent'
import FileTreeEmptyState from '@/components/features/filetree/FileTreeEmptyState'
import { type TreeNode } from '@/utils/fileTreeUtils'

// Re-export TreeNode type for backward compatibility
export type { TreeNode }

interface FileTreeProps {
  data: TreeNode[]
  onSelectNode?: (node: TreeNode | null) => void
  onToggleNode?: (node: TreeNode) => void
  selectedNode?: TreeNode | null
  className?: string
  maxHeight?: string
  maxDepth?: number
  showFileIcons?: boolean
  emptyMessage?: string
}

/**
 * Refactored FileTree component
 * Follows architecture guide principles:
 * - Single responsibility: File tree orchestration
 * - Under 150 lines (reduced from 214 lines)
 * - Clean separation of concerns via hooks and components
 * - Composition over complex logic
 */
export const FileTree: React.FC<FileTreeProps> = ({
  data,
  onSelectNode,
  onToggleNode,
  selectedNode,
  className,
  maxHeight = '400px',
  maxDepth,
  showFileIcons = true,
  emptyMessage,
}) => {
  const {
    nodes,
    selectedNodeId,
    handleNodeSelect,
    handleNodeToggle,
    updateNodes,
  } = useFileTreeState({
    initialNodes: data,
    onNodeSelect: onSelectNode,
    onNodeToggle: onToggleNode,
  })

  // Update nodes when data prop changes
  useEffect(() => {
    updateNodes(data)
  }, [data, updateNodes])

  // Handle external selectedNode prop
  useEffect(() => {
    if (selectedNode && selectedNode.id !== selectedNodeId) {
      handleNodeSelect(selectedNode)
    }
  }, [selectedNode, selectedNodeId, handleNodeSelect])

  // Filter nodes by maxDepth if specified
  const processedNodes = maxDepth !== undefined 
    ? filterNodesByDepth(nodes, maxDepth)
    : nodes

  if (processedNodes.length === 0) {
    return <FileTreeEmptyState className={className} message={emptyMessage} />
  }

  return (
    <div className={clsx('bg-surface app-border rounded-md overflow-hidden', className)}>
      <div 
        className="overflow-auto p-2"
        style={{ maxHeight }}
      >
        {processedNodes.map((node) => (
          <TreeNodeComponent
            key={node.id}
            node={node}
            level={0}
            onNodeSelect={handleNodeSelect}
            onNodeToggle={handleNodeToggle}
            selectedNodeId={selectedNodeId}
            showFileIcons={showFileIcons}
          />
        ))}
      </div>
    </div>
  )
}

/**
 * Helper function to filter nodes by maximum depth
 */
function filterNodesByDepth(nodes: TreeNode[], maxDepth: number, currentDepth = 0): TreeNode[] {
  if (currentDepth >= maxDepth) {
    return []
  }

  return nodes.map(node => {
    if (node.children && currentDepth < maxDepth - 1) {
      return {
        ...node,
        children: filterNodesByDepth(node.children, maxDepth, currentDepth + 1)
      }
    }
    
    // Remove children if we've reached max depth
    return currentDepth >= maxDepth - 1 ? { ...node, children: undefined } : node
  })
}
EOF

# Create PathInput.tsx
cat > "src/components/ui/PathInput.tsx" << 'EOF'
import React from 'react'
import { FolderOpen, Folder, Check, AlertCircle } from 'lucide-react'
import { Button } from '@/components/ui/Button'

interface PathInputProps {
  label: string
  value?: string
  placeholder?: string
  onBrowse: () => void
  description?: string
  optional?: boolean
  variant?: 'input' | 'output'
  className?: string
}

/**
 * Simple professional path input field with browse button
 * Similar to what you'd see in installer dialogs or preferences panels
 */
const PathInput: React.FC<PathInputProps> = ({
  label,
  value,
  placeholder = "No path selected",
  onBrowse,
  description,
  optional = false,
  variant = 'input',
  className = ''
}) => {
  const hasValue = Boolean(value)
  const Icon = variant === 'output' ? FolderOpen : Folder

  return (
    <div className={`space-y-2 ${className}`}>
      {/* Label */}
      <label className="block">
        <div className="flex items-center gap-2 mb-2">
          <Icon className="w-4 h-4 text-accent" />
          <span className="text-sm font-medium text-text">{label}</span>
          {optional && (
            <span className="text-xs text-text-muted">(Optional)</span>
          )}
        </div>
        
        {/* Input Row */}
        <div className={`
          flex app-border rounded-md overflow-hidden transition-colors
          ${hasValue ? 'border-accent' : ''}
          ${variant === 'output' ? 'border-dashed' : ''}
        `}>
          {/* Path Display */}
          <div className="flex-1 flex items-center px-3 py-2 bg-background min-h-[36px]">
            {hasValue ? (
              <div className="flex items-center gap-2 w-full">
                <Check className="w-4 h-4 text-accent flex-shrink-0" />
                <span className="text-sm font-mono text-text truncate" title={value}>
                  {value}
                </span>
              </div>
            ) : (
              <div className="flex items-center gap-2">
                <AlertCircle className="w-4 h-4 text-text-muted" />
                <span className="text-sm text-text-muted italic">
                  {placeholder}
                </span>
              </div>
            )}
          </div>
          
          {/* Browse Button */}
          <Button
            onClick={onBrowse}
            variant="ghost"
            size="sm"
            className="px-4 py-2 border-l border-border rounded-none hover:bg-surface-hover"
          >
            <FolderOpen className="w-4 h-4 mr-2" />
            Browse
          </Button>
        </div>
        
        {/* Description */}
        {description && (
          <p className="text-xs text-text-muted mt-1">
            {description}
          </p>
        )}
      </label>
    </div>
  )
}

export default PathInput
EOF

# Create ProgressBar.tsx
cat > "src/components/ui/ProgressBar.tsx" << 'EOF'
import React from 'react'
import { clsx } from 'clsx'

interface ProgressBarProps {
  value: number
  max: number
  label?: string
  showPercentage?: boolean
  size?: 'sm' | 'md' | 'lg'
  variant?: 'default' | 'success' | 'warning' | 'error'
  className?: string
}

const progressVariants = {
  default: 'bg-accent',
  success: 'bg-status-success',
  warning: 'bg-status-warning',
  error: 'bg-status-error',
}

const progressSizes = {
  sm: 'h-1',
  md: 'h-2',
  lg: 'h-3',
}

export const ProgressBar: React.FC<ProgressBarProps> = ({
  value,
  max,
  label,
  showPercentage = true,
  size = 'md',
  variant = 'default',
  className,
}) => {
  const percentage = Math.min(100, Math.max(0, (value / max) * 100))
  const isComplete = percentage === 100

  return (
    <div className={clsx('w-full', className)}>
      {(label || showPercentage) && (
        <div className="flex justify-between items-center mb-2">
          {label && (
            <span className="text-sm font-medium text-text">
              {label}
            </span>
          )}
          {showPercentage && (
            <span className="text-sm text-text-muted">
              {Math.round(percentage)}%
            </span>
          )}
        </div>
      )}
      
      <div className={clsx(
        'w-full bg-surface-hover rounded-full overflow-hidden',
        progressSizes[size]
      )}>
        <div
          className={clsx(
            'h-full transition-all duration-300 ease-out rounded-full',
            progressVariants[isComplete && variant === 'default' ? 'success' : variant]
          )}
          style={{ width: `${percentage}%` }}
        />
      </div>
      
      {label && (
        <div className="flex justify-between items-center mt-1">
          <span className="text-xs text-text-muted">
            {value} of {max}
          </span>
        </div>
      )}
    </div>
  )
}
EOF

# Create QueueList.tsx
cat > "src/components/ui/QueueList.tsx" << 'EOF'
import React from 'react'
import { CheckCircle, Clock, XCircle, FileText, Folder, AlertCircle, Wrench } from 'lucide-react'
import { clsx } from 'clsx'

export interface QueueItem {
  id: string
  name: string
  status: 'pending' | 'processing' | 'completed' | 'error'
  type: 'file' | 'folder' | 'task' | 'scaffold'
  path?: string
  progress?: number
  error?: string
  timestamp?: Date
}

interface QueueListProps {
  items: QueueItem[]
  title?: string
  onRetry?: (itemId: string) => void
  onRemove?: (itemId: string) => void
  className?: string
  maxHeight?: string
}

const statusIcons = {
  pending: Clock,
  processing: Clock,
  completed: CheckCircle,
  error: XCircle,
}

const statusColors = {
  pending: 'text-text-muted',
  processing: 'text-accent animate-pulse',
  completed: 'text-status-success',
  error: 'text-status-error',
}

const typeIcons = {
  file: FileText,
  folder: Folder,
  task: AlertCircle,
  scaffold: Wrench,
}

export const QueueList: React.FC<QueueListProps> = ({
  items,
  title,
  onRetry,
  onRemove,
  className,
  maxHeight = '400px',
}) => {
  const pendingCount = items.filter(item => item.status === 'pending').length
  const processingCount = items.filter(item => item.status === 'processing').length
  const completedCount = items.filter(item => item.status === 'completed').length
  const errorCount = items.filter(item => item.status === 'error').length

  if (items.length === 0) {
    return (
      <div className={clsx(
        'bg-surface border border-border rounded-lg p-6 text-center',
        className
      )}>
        <FileText className="w-12 h-12 text-text-muted mx-auto mb-3" />
        <p className="text-text-muted">No items in queue</p>
      </div>
    )
  }

  return (
    <div className={clsx('bg-surface border border-border rounded-lg', className)}>
      {title && (
        <div className="px-4 py-3 border-b border-border">
          <h3 className="font-semibold text-text">{title}</h3>
          <div className="flex gap-4 mt-1 text-sm text-text-muted">
            {pendingCount > 0 && <span>Pending: {pendingCount}</span>}
            {processingCount > 0 && <span>Processing: {processingCount}</span>}
            {completedCount > 0 && <span>Completed: {completedCount}</span>}
            {errorCount > 0 && <span>Errors: {errorCount}</span>}
          </div>
        </div>
      )}
      
      <div 
        className="overflow-auto"
        style={{ maxHeight }}
      >
        {items.map((item) => {
          const StatusIcon = statusIcons[item.status]
          const TypeIcon = typeIcons[item.type]
          
          return (
            <div
              key={item.id}
              className={clsx(
                'flex items-center gap-3 px-4 py-3 border-b border-border last:border-b-0',
                'hover:bg-surface-hover transition-colors'
              )}
            >
              <div className="flex-shrink-0">
                <TypeIcon className="w-4 h-4 text-text-muted" />
              </div>
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2">
                  <h4 className="font-medium text-text truncate">
                    {item.name}
                  </h4>
                  <StatusIcon className={clsx('w-4 h-4', statusColors[item.status])} />
                </div>
                
                {item.path && (
                  <p className="text-sm text-text-muted truncate mt-1">
                    {item.path}
                  </p>
                )}
                
                {item.error && (
                  <p className="text-sm text-status-error mt-1">
                    {item.error}
                  </p>
                )}
                
                {item.status === 'processing' && item.progress !== undefined && (
                  <div className="w-full bg-surface-hover rounded-full h-1 mt-2">
                    <div
                      className="bg-accent h-1 rounded-full transition-all duration-300"
                      style={{ width: `${item.progress}%` }}
                    />
                  </div>
                )}
                
                {item.timestamp && (
                  <p className="text-xs text-text-muted mt-1">
                    {item.timestamp.toLocaleTimeString()}
                  </p>
                )}
              </div>
              
              <div className="flex items-center gap-2">
                {item.status === 'error' && onRetry && (
                  <button
                    onClick={() => onRetry(item.id)}
                    className="text-xs px-2 py-1 rounded bg-surface-hover hover:bg-surface-active text-text transition-colors"
                  >
                    Retry
                  </button>
                )}
                
                {onRemove && (
                  <button
                    onClick={() => onRemove(item.id)}
                    className="text-xs px-2 py-1 rounded bg-surface-hover hover:bg-surface-active text-text transition-colors"
                  >
                    Remove
                  </button>
                )}
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}
EOF

# Create Toast.tsx
cat > "src/components/ui/Toast.tsx" << 'EOF'
import React from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { CheckCircle, XCircle, AlertCircle, Info, X } from 'lucide-react'

export type ToastType = 'success' | 'error' | 'warning' | 'info'

export interface Toast {
  id: string
  type: ToastType
  title: string
  message?: string
  duration?: number
  action?: {
    label: string
    onClick: () => void
  }
}

interface ToastComponentProps {
  toast: Toast
  onDismiss: (id: string) => void
}

const icons = {
  success: CheckCircle,
  error: XCircle,
  warning: AlertCircle,
  info: Info,
}

const styles = {
  success: 'bg-surface border-border text-text shadow-lg',
  error: 'bg-surface border-red-300 text-text shadow-lg',
  warning: 'bg-surface border-yellow-300 text-text shadow-lg',
  info: 'bg-surface border-accent text-text shadow-lg',
}

const iconStyles = {
  success: 'text-accent',
  error: 'text-red-400',
  warning: 'text-yellow-400',
  info: 'text-accent',
}

export const ToastComponent: React.FC<ToastComponentProps> = ({ toast, onDismiss }) => {
  const Icon = icons[toast.type]

  React.useEffect(() => {
    if (toast.duration && toast.duration > 0) {
      const timer = setTimeout(() => {
        onDismiss(toast.id)
      }, toast.duration)
      return () => clearTimeout(timer)
    }
  }, [toast.id, toast.duration, onDismiss])

  return (
    <motion.div
      initial={{ opacity: 0, y: 50, scale: 0.3 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, scale: 0.5, transition: { duration: 0.2 } }}
      className={`
        relative w-full max-w-sm p-4 border rounded-lg shadow-lg backdrop-blur-sm
        ${styles[toast.type]}
      `}
    >
      <div className="flex items-start">
        <Icon className={`w-5 h-5 mt-0.5 mr-3 flex-shrink-0 ${iconStyles[toast.type]}`} />
        <div className="flex-1 min-w-0">
          <p className="text-sm font-semibold">{toast.title}</p>
          {toast.message && (
            <p className="mt-1 text-sm opacity-90">{toast.message}</p>
          )}
          {toast.action && (
            <button
              onClick={toast.action.onClick}
              className="mt-2 text-sm font-medium underline hover:no-underline"
            >
              {toast.action.label}
            </button>
          )}
        </div>
        <button
          onClick={() => onDismiss(toast.id)}
          className="flex-shrink-0 ml-2 p-1 rounded hover:bg-black/5 dark:hover:bg-white/5"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
    </motion.div>
  )
}

interface ToastContainerProps {
  toasts: Toast[]
  onDismiss: (id: string) => void
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'
  bottomOffset?: string
}

export const ToastContainer: React.FC<ToastContainerProps> = ({
  toasts,
  onDismiss,
  position = 'top-right',
  bottomOffset
}) => {
  const getPositionClasses = () => {
    const baseClasses = {
      'top-right': 'top-4 right-4',
      'top-left': 'top-4 left-4',
      'bottom-right': 'right-4',
      'bottom-left': 'left-4',
    }
    
    if (position.startsWith('bottom') && bottomOffset) {
      return `${baseClasses[position]} ${bottomOffset}`
    }
    
    return position.startsWith('bottom') 
      ? `${baseClasses[position]} bottom-4`
      : baseClasses[position]
  }

  return (
    <div className={`fixed z-50 space-y-2 ${getPositionClasses()}`}>
      <AnimatePresence>
        {toasts.map((toast) => (
          <ToastComponent
            key={toast.id}
            toast={toast}
            onDismiss={onDismiss}
          />
        ))}
      </AnimatePresence>
    </div>
  )
}
EOF

# Create select.tsx
cat > "src/components/ui/select.tsx" << 'EOF'
import React, { useEffect, useState } from 'react'
import { Listbox, ListboxButton, ListboxOption, ListboxOptions } from '@headlessui/react'
import { Check, ChevronDown } from 'lucide-react'
import { cn } from '@/lib/utils'

export interface SelectOption {
  value: string
  label: string
}

interface SelectProps {
  value?: string
  onValueChange?: (value: string) => void
  options: SelectOption[]
  placeholder?: string
  disabled?: boolean
  className?: string
}

export const Select: React.FC<SelectProps> = ({
  value,
  onValueChange,
  options,
  placeholder = 'Select an option',
  disabled = false,
  className,
}) => {
  const selectedOption = options.find((option) => option.value === value)
  const [themeClasses, setThemeClasses] = useState('')

  // Theme detection - get all theme-related classes including color scheme
  useEffect(() => {
    const getThemeClasses = () => {
      const appContainer = document.querySelector('.h-screen.flex.flex-col') // Layout root element
      if (appContainer) {
        const classes = Array.from(appContainer.classList)
        const relevantClasses = classes.filter(
          (cls) =>
            cls === 'dark' ||
            cls === 'high-contrast' ||
            cls.startsWith('color-') ||
            cls.startsWith('font-') ||
            cls.startsWith('icon-'),
        )
        setThemeClasses(relevantClasses.join(' '))
      }
    }

    getThemeClasses()
    // Simple interval check instead of MutationObserver to avoid complexity
    const interval = setInterval(getThemeClasses, 500)
    return () => clearInterval(interval)
  }, [])

  return (
    <Listbox value={value} onChange={onValueChange} disabled={disabled}>
      <ListboxButton
        className={cn(
          'relative block w-full py-1.5 pr-8 pl-3 text-left text-sm disabled:cursor-not-allowed disabled:opacity-50 bg-surface text-text app-border rounded-md',
          className,
        )}
      >
        {selectedOption ? selectedOption.label : placeholder}
        <ChevronDown
          className="pointer-events-none absolute top-2.5 right-2.5 h-4 w-4"
          style={{ color: 'var(--text-muted)' }}
          aria-hidden="true"
        />
      </ListboxButton>

      <ListboxOptions
        anchor="bottom"
        transition
        className={cn(
          'w-[var(--button-width)] p-1 shadow-lg focus:outline-none bg-surface app-border rounded-md',
          'transition duration-100 ease-in data-closed:opacity-0 data-closed:scale-95',
          themeClasses,
        )}
      >
        {options.map((option) => (
          <ListboxOption key={option.value} value={option.value}>
            {({ selected, focus }) => (
              <div
                className="relative cursor-default select-none py-2 pl-10 pr-4"
                style={{
                  backgroundColor: focus
                    ? 'var(--surface-hover)'
                    : selected
                    ? 'var(--surface-hover)'
                    : 'transparent',
                  color: selected ? 'var(--accent)' : 'var(--text)',
                }}
              >
                <span className={cn('block truncate', selected ? 'font-medium' : 'font-normal')}>
                  {option.label}
                </span>
                {selected && (
                  <span
                    className="absolute inset-y-0 left-0 flex items-center pl-3"
                    style={{ color: 'var(--accent)' }}
                  >
                    <Check className="h-5 w-5" aria-hidden="true" />
                  </span>
                )}
              </div>
            )}
          </ListboxOption>
        ))}
      </ListboxOptions>
    </Listbox>
  )
}

EOF

# Create switch.tsx
cat > "src/components/ui/switch.tsx" << 'EOF'
import React from 'react'
import { Switch as HeadlessSwitch } from '@headlessui/react'
import { cn } from '@/lib/utils'

interface SwitchProps {
  checked?: boolean
  onCheckedChange?: (checked: boolean) => void
  disabled?: boolean
  id?: string
  className?: string
}

export const Switch: React.FC<SwitchProps> = ({
  checked = false,
  onCheckedChange,
  disabled = false,
  id,
  className,
  ...props
}) => {
  return (
    <HeadlessSwitch
      checked={checked}
      onChange={onCheckedChange}
      disabled={disabled}
      id={id}
      className={cn(
        'group relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full app-border-2 app-border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-[var(--accent)] focus:ring-offset-2 focus:ring-offset-[var(--background)] disabled:cursor-not-allowed disabled:opacity-50',
        checked ? 'bg-[var(--accent)]' : 'bg-[var(--surface-hover)]',
        className,
      )}
      {...props}
    >
      <span
        aria-hidden="true"
        className={cn(
          'pointer-events-none inline-block h-5 w-5 transform rounded-full shadow-lg ring-0 transition duration-200 ease-in-out bg-[var(--background)]',
          checked ? 'translate-x-5' : 'translate-x-0',
        )}
      />
    </HeadlessSwitch>
  )
}

EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"#!/bin/bash

#============================================================================
# Detox Tool Component Generator Script
# Category: ui-components
# Description: Shared UI components (Toast, Button, Modal, etc.)
# Generated by: Task-Writer ScaffoldGenerator
# Implementation Phases: 4, 5
#============================================================================

# Create target directory structure
mkdir -p src/components/layout
mkdir -p src/components/ui
mkdir -p src/components/shared/forms
mkdir -p src/components/shared/generators
mkdir -p src/hooks
mkdir -p src/services
mkdir -p src/config
mkdir -p src/types

echo "🚀 Creating ui-components for detox-tool..."
echo "📁 Target: ./src/"
echo ""

