#!/bin/bash

#============================================================================
# Detox Tool Component Generator Script
# Category: titlebar-components
# Description: Title bar and tab components
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating titlebar-components for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/components/titlebar/
mkdir -p src/components/search
mkdir -p src/components/sidebar
mkdir -p src/components/menu
mkdir -p src/components/titlebar
mkdir -p src/pages/settings
mkdir -p src/contexts
mkdir -p src/utils
mkdir -p src/data
mkdir -p src/lib
mkdir -p src/types

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.183Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/titlebar
# Target OS: cross-platform
# Directories: 0
# Files: 3
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create AppControls.tsx
cat > "src/components/titlebar/AppControls.tsx" << 'EOF'
import React from 'react'
import { VscLayoutSidebarLeft, VscLayoutSidebarRight } from 'react-icons/vsc'
import { Sun, Moon, Search } from 'lucide-react'
import type { AppSettings } from '../../hooks/useSettings'

interface AppControlsProps {
  sidebarPosition: AppSettings['sidebarPosition']
  onToggleSidebarPosition: () => void
  theme: AppSettings['theme']
  onToggleTheme: () => void
  onOpenSearch: () => void
  className?: string
}

const AppControls = ({
  sidebarPosition,
  onToggleSidebarPosition,
  theme,
  onToggleTheme,
  onOpenSearch,
  className,
}: AppControlsProps) => {
  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>, action: () => void) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault()
      action()
    }
  }

  return (
    <div
      className={`flex items-center ${className || ''}`}
      style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}
    >
      <div
        role="button"
        tabIndex={0}
        onClick={onOpenSearch}
        onKeyDown={(e) => handleKeyDown(e, onOpenSearch)}
        className="w-12 h-8 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover focus:bg-surface-hover focus:text-text focus:outline-none transition-colors cursor-default"
        title="Search features and pages (Ctrl+F)"
        aria-label="Open search dialog"
      >
        <div className="tab-icon [&_svg]:stroke-1">
          <Search size={14} />
        </div>
      </div>

      <div
        role="button"
        tabIndex={0}
        onClick={onToggleSidebarPosition}
        onKeyDown={(e) => handleKeyDown(e, onToggleSidebarPosition)}
        className="w-12 h-8 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover focus:bg-surface-hover focus:text-text focus:outline-none transition-colors cursor-default"
        title={`Move sidebar to ${sidebarPosition === 'left' ? 'right' : 'left'}`}
        aria-label={`Move sidebar to ${sidebarPosition === 'left' ? 'right' : 'left'}`}
      >
        <div className="tab-icon [&_svg]:stroke-1">
          {sidebarPosition === 'left' ? (
            <VscLayoutSidebarRight size={14} />
          ) : (
            <VscLayoutSidebarLeft size={14} />
          )}
        </div>
      </div>

      <div
        role="button"
        tabIndex={0}
        onClick={onToggleTheme}
        onKeyDown={(e) => handleKeyDown(e, onToggleTheme)}
        className="w-12 h-8 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover focus:bg-surface-hover focus:text-text focus:outline-none transition-colors cursor-default"
        title={`Switch to ${theme === 'dark' ? 'light' : 'dark'} theme`}
        aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} theme`}
      >
        <div className="tab-icon [&_svg]:stroke-1">
          {theme === 'dark' ? <Sun size={14} /> : <Moon size={14} />}
        </div>
      </div>

      <div className="w-px h-4 bg-border" aria-hidden="true"></div>
    </div>
  )
}

export default AppControls

EOF

# Create TabBar.tsx
cat > "src/components/titlebar/TabBar.tsx" << 'EOF'
import React from 'react'
import {
  DndContext,
  closestCenter,
  DragOverlay,
} from '@dnd-kit/core'
import TabBarScrollable from '@/components/features/tabbar/TabBarScrollable'
import TabBarControls from '@/components/features/tabbar/TabBarControls'
import TabItem from '@/components/features/tabbar/TabItem'
import { useTabBarDragDrop } from '@/hooks/useTabBarDragDrop'
import { useTabBarScroll } from '@/hooks/useTabBarScroll'
import type { Tab } from '@/types/tab'

export type { Tab }

interface TabBarProps {
  tabs: Tab[]
  onTabClick: (tabId: string) => void
  onTabClose: (tabId: string) => void
  onTabReorder?: (reorderedTabs: Tab[]) => void
  className?: string
  activeTabId?: string | null
}

/**
 * Main TabBar component - orchestrates tab navigation with drag & drop
 * Follows architecture guide principles:
 * - Single responsibility: Tab bar orchestration
 * - Under 150 lines
 * - Composition over complex logic
 * - Clean separation of concerns via custom hooks
 * 
 * Refactored from 291 lines to ~80 lines (72% reduction)
 * All drag & drop logic extracted to useTabBarDragDrop hook
 * All scroll logic extracted to useTabBarScroll hook
 * All UI components split into focused, reusable pieces
 */
const TabBar: React.FC<TabBarProps> = ({
  tabs,
  onTabClick,
  onTabClose,
  onTabReorder,
  className = '',
  activeTabId,
}) => {
  // Extract drag & drop functionality
  const dragDrop = useTabBarDragDrop({
    tabs,
    onTabReorder,
  })

  // Extract scroll functionality
  const scroll = useTabBarScroll()

  if (tabs.length === 0) {
    return null
  }

  return (
    <div className={`flex-1 flex items-end bg-transparent mt-1 ${className}`}>
      {/* Left scroll control */}
      <TabBarControls
        canScrollLeft={scroll.canScrollLeft}
        canScrollRight={false}
        onScrollLeft={scroll.scrollLeft}
        onScrollRight={scroll.scrollRight}
      />

      {/* Drag and Drop Context */}
      <DndContext
        sensors={dragDrop.sensors}
        collisionDetection={closestCenter}
        onDragStart={dragDrop.handleDragStart}
        onDragEnd={dragDrop.handleDragEnd}
        onDragCancel={dragDrop.handleDragCancel}
      >
        {/* Scrollable Tab Container */}
        <TabBarScrollable
          tabs={tabs}
          activeTabId={activeTabId}
          onTabClick={onTabClick}
          onTabClose={onTabClose}
          scrollContainerRef={scroll.scrollContainerRef}
        />

        {/* Drag Overlay */}
        <DragOverlay>
          {dragDrop.activeTab && (
            <TabItem
              tab={dragDrop.activeTab}
              isActive={dragDrop.activeTab.id === activeTabId}
              onTabClick={() => {}}
              onTabClose={() => {}}
              isFirst={false}
            />
          )}
        </DragOverlay>
      </DndContext>

      {/* Right scroll control */}
      <TabBarControls
        canScrollLeft={false}
        canScrollRight={scroll.canScrollRight}
        onScrollLeft={scroll.scrollLeft}
        onScrollRight={scroll.scrollRight}
      />
    </div>
  )
}

export default TabBar
EOF

# Create WindowControls.tsx
cat > "src/components/titlebar/WindowControls.tsx" << 'EOF'
import React, { useState, useEffect } from 'react'
import {
  VscChromeMinimize,
  VscChromeMaximize,
  VscChromeRestore,
  VscChromeClose,
} from 'react-icons/vsc'
import { usePlatform } from '../../hooks/usePlatform'

interface WindowControlsProps {
  className?: string
}

const WindowControls = ({ className }: WindowControlsProps) => {
  const platformService = usePlatform()
  const [isMaximized, setIsMaximized] = useState(false)

  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>, action: () => void) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault()
      action()
    }
  }

  useEffect(() => {
    if (platformService.isElectron()) {
      const unsubscribe = platformService.onWindowStateChange(({ isMaximized: maximized }) => {
        setIsMaximized(maximized)
      })

      // Get initial state
      platformService
        .isMaximized()
        .then((maximized) => setIsMaximized(maximized))
        .catch((error) => {
          console.error('WindowControls: Failed to get initial window state:', error)
        })

      return unsubscribe
    } else {
      setIsMaximized(false)
      return () => {}
    }
  }, [platformService])

  const handleMinimize = () => {
    if (platformService.isElectron()) {
      platformService.minimizeWindow()
    } else {
      console.log('Minimize requested (browser environment)')
    }
  }

  const handleMaximizeToggle = async () => {
    if (platformService.isElectron()) {
      await platformService.maximizeWindow()
      // State is updated via onWindowStateChange listener
    } else {
      console.log('Maximize/Restore requested (browser environment)')
      setIsMaximized(!isMaximized)
    }
  }

  const handleClose = () => {
    if (platformService.isElectron()) {
      platformService.closeWindow()
    } else {
      console.log('Close requested (browser environment)')
      platformService.closeWindow()
    }
  }

  const maximizeLabel = isMaximized ? 'Restore' : 'Maximize'
  const MaximizeIcon = isMaximized ? VscChromeRestore : VscChromeMaximize

  return (
    <div
      className={`flex items-center ${className || ''}`}
      style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}
    >
      <div
        role="button"
        tabIndex={0}
        onClick={handleMinimize}
        onKeyDown={(e) => handleKeyDown(e, handleMinimize)}
        className="w-12 h-8 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover focus:bg-surface-hover focus:text-text focus:outline-none transition-colors cursor-default"
        aria-label="Minimize"
        title="Minimize"
      >
        <div className="tab-icon [&_svg]:stroke-1">
          <VscChromeMinimize size={12} />
        </div>
      </div>
      <div
        role="button"
        tabIndex={0}
        onClick={handleMaximizeToggle}
        onKeyDown={(e) => handleKeyDown(e, handleMaximizeToggle)}
        className="w-12 h-8 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover focus:bg-surface-hover focus:text-text focus:outline-none transition-colors cursor-default"
        aria-label={maximizeLabel}
        title={maximizeLabel}
      >
        <div className="tab-icon [&_svg]:stroke-1">
          <MaximizeIcon size={12} />
        </div>
      </div>
      <div
        role="button"
        tabIndex={0}
        onClick={handleClose}
        onKeyDown={(e) => handleKeyDown(e, handleClose)}
        className="w-12 h-8 flex items-center justify-center text-text-muted hover:text-text hover:bg-surface-hover focus:bg-surface-hover focus:text-text focus:outline-none transition-colors cursor-default"
        aria-label="Close"
        title="Close"
      >
        <div className="tab-icon [&_svg]:stroke-1">
          <VscChromeClose size={12} />
        </div>
      </div>
    </div>
  )
}

export default WindowControls

EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ titlebar-components components created successfully!"
