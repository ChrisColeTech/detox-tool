#!/bin/bash

#============================================================================
# Detox Tool Component Generator Script
# Category: utils
# Description: Utility functions and helpers
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating utils for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/utils/
mkdir -p src/components/search
mkdir -p src/components/sidebar
mkdir -p src/components/menu
mkdir -p src/components/titlebar
mkdir -p src/pages/settings
mkdir -p src/contexts
mkdir -p src/utils
mkdir -p src/data
mkdir -p src/lib
mkdir -p src/types

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.216Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/utils
# Target OS: cross-platform
# Directories: 0
# Files: 3
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create fileTreeUtils.ts
cat > "src/utils/fileTreeUtils.ts" << 'EOF'
import { File, FileText, Image, Code, Folder, FolderOpen } from 'lucide-react'

/**
 * Utility functions for FileTree component
 * Follows architecture guide principles:
 * - Single responsibility: File tree utility functions
 * - Pure functions for testability
 * - No React dependencies
 */

export const getFileIcon = (filename: string, isOpen?: boolean) => {
  if (isOpen !== undefined) {
    return isOpen ? FolderOpen : Folder
  }
  
  const ext = filename.split('.').pop()?.toLowerCase()
  
  if (['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(ext || '')) {
    return Image
  }
  
  if (['js', 'ts', 'tsx', 'jsx', 'py', 'java', 'cs', 'cpp', 'c', 'h', 'php', 'rb', 'go', 'rs', 'swift', 'kt'].includes(ext || '')) {
    return Code
  }
  
  if (['txt', 'md', 'json', 'yaml', 'yml', 'xml', 'html', 'css', 'scss'].includes(ext || '')) {
    return FileText
  }
  
  return File
}

export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 B'
  const k = 1024
  const sizes = ['B', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]
}

export const findNodeById = (nodes: TreeNode[], id: string): TreeNode | null => {
  for (const node of nodes) {
    if (node.id === id) {
      return node
    }
    if (node.children) {
      const found = findNodeById(node.children, id)
      if (found) return found
    }
  }
  return null
}

export const updateNodeExpanded = (nodes: TreeNode[], id: string, expanded: boolean): TreeNode[] => {
  return nodes.map(node => {
    if (node.id === id) {
      return { ...node, expanded }
    }
    if (node.children) {
      return { ...node, children: updateNodeExpanded(node.children, id, expanded) }
    }
    return node
  })
}

export interface TreeNode {
  id: string
  name: string
  type: 'file' | 'folder'
  path: string
  children?: TreeNode[]
  size?: number
  fileCount?: number
  selected?: boolean
  expanded?: boolean
}
EOF

# Create iconUtils.tsx
cat > "src/utils/iconUtils.tsx" << 'EOF'
import React from 'react'

export const createIconElement = (IconComponent: React.ElementType, sizeOrClassName: number | string) => {
  // If it's a string, treat it as className for CSS-based sizing
  if (typeof sizeOrClassName === 'string') {
    return <IconComponent className={sizeOrClassName} />
  }
  // Otherwise, use the legacy size prop
  return <IconComponent size={sizeOrClassName} />
}

export const getIconSizeForContext = (
  context: 'sidebar' | 'tab' | 'page',
  iconSize: 'small' | 'medium' | 'large',
) => {
  const sizeMap = {
    sidebar: {
      small: 14,
      medium: 16,
      large: 18,
    },
    tab: {
      small: 10,
      medium: 12,
      large: 14,
    },
    page: {
      small: 18,
      medium: 20,
      large: 22,
    },
  }

  return sizeMap[context][iconSize]
}

EOF

# Create utils.ts
cat > "src/utils/utils.ts" << 'EOF'
export function formatTitle(title: string): string {
  return title.charAt(0).toUpperCase() + title.slice(1)
}

export function generateId(): string {
  return Math.random().toString(36).substring(2, 11)
}

export function debounce<T extends (...args: unknown[]) => unknown>(
  func: T,
  wait: number,
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout | null = null
  return (...args: Parameters<T>) => {
    if (timeout) {
      clearTimeout(timeout)
    }
    timeout = setTimeout(() => func(...args), wait)
  }
}

export function throttle<T extends (...args: unknown[]) => unknown>(
  func: T,
  limit: number,
): (...args: Parameters<T>) => void {
  let inThrottle: boolean = false
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args)
      inThrottle = true
      setTimeout(() => (inThrottle = false), limit)
    }
  }
}

export function getStorageKey(key: string): string {
  return `task-writer-${key}`
}

export function safeJsonParse<T>(jsonString: string | null, fallback: T): T {
  if (jsonString === null) return fallback
  try {
    return JSON.parse(jsonString) || fallback
  } catch {
    return fallback
  }
}

export function clamp(value: number, min: number, max: number): number {
  return Math.min(Math.max(value, min), max)
}

EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ utils components created successfully!"
