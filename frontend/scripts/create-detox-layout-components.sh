# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:16.615Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/layout
# Target OS: cross-platform
# Directories: 0
# Files: 7
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create Layout.tsx
cat > "src/components/layout/Layout.tsx" << 'EOF'
import React from 'react'
import TitleBar from '@/components/layout/TitleBar'
import StatusBar from '@/components/layout/StatusBar'
import LayoutMainContent from '@/components/layout/LayoutMainContent'
import LayoutSidebar from '@/components/layout/LayoutSidebar'
import SpotlightSearch from '@/components/search/SpotlightSearch'
import { ToastContainer } from '@/components/ui/Toast'
import ErrorBanner from '@/components/ui/ErrorBanner'
import { useLayoutState } from '@/hooks/useLayoutState'
import { useLayoutServices } from '@/hooks/useLayoutServices'
import { useLayoutKeyboard } from '@/hooks/useLayoutKeyboard'
import { useLayoutEffects } from '@/hooks/useLayoutEffects'

/**
 * Main Layout component - orchestrates the application layout
 * Follows architecture guide principles:
 * - Single responsibility: Layout orchestration only
 * - Composition over complex logic
 * - Separation of concerns via custom hooks
 * - Under 100 lines as per page component guidelines
 */
const Layout = (): React.ReactElement => {
  // Extract all state management to custom hook
  const layoutState = useLayoutState()
  
  // Extract service coordination to custom hook
  const layoutServices = useLayoutServices({
    addTab: layoutState.addTab,
    removeTab: layoutState.removeTab,
    setActiveTabInHook: layoutState.setActiveTabInHook,
    updateSetting: layoutState.updateSetting,
    success: layoutState.success,
    reorderTabs: layoutState.reorderTabs,
  })

  // Extract keyboard shortcuts to custom hook
  useLayoutKeyboard({
    onOpenSearch: layoutState.handleOpenSearch,
  })

  // Extract layout effects to custom hook
  useLayoutEffects({
    activeTabId: layoutState.activeTabId,
    activeTab: layoutState.activeTab,
    updateSetting: layoutState.updateSetting,
    currentTabHasPanel: layoutState.currentTabHasPanel,
    isExpanded: layoutState.isExpanded,
  })

  return (
    <div className={layoutState.cssClasses}>
      <TitleBar
        sidebarPosition={layoutState.settings.sidebarPosition}
        onToggleSidebarPosition={layoutState.handleToggleSidebarPosition}
        theme={layoutState.settings.theme}
        onToggleTheme={layoutState.handleToggleTheme}
        onOpenSearch={layoutState.handleOpenSearch}
        tabs={layoutState.tabsWithIcons}
        onTabClick={layoutServices.handleTabClick}
        onTabClose={layoutServices.handleTabClose}
        onTabReorder={layoutServices.handleTabReorder}
        activeTabId={layoutState.activeTabId}
      />

      <div className="flex-1 flex min-h-0">
        {layoutState.settings.sidebarPosition === 'left' && (
          <LayoutSidebar
            settings={layoutState.settings}
            activeTab={layoutState.activeTab}
            activeTabId={layoutState.activeTabId}
            isExpanded={layoutState.isExpanded}
            currentTabHasPanel={layoutState.currentTabHasPanel}
            pinnedItems={layoutState.settings.pinnedSidebarItems}
            onTabChange={layoutServices.handleTabChange}
            onToggleExpanded={layoutState.handleToggleExpanded}
            onSettingsClick={layoutServices.handleSettingsClick}
            isSidebarItemVisible={layoutState.isSidebarItemVisible}
            onToggleVisibility={layoutState.toggleSidebarItemVisibility}
            onTogglePin={layoutState.toggleSidebarItemPin}
          />
        )}

        <main className="flex-1 bg-background overflow-hidden">
          <div className="h-full flex flex-col">
            <ErrorBanner />
            <div className="flex-1 overflow-hidden">
              <LayoutMainContent
                tabs={layoutState.tabs}
                activeTabId={layoutState.activeTabId}
                settings={layoutState.settings}
                updateSetting={layoutState.updateSetting}
                isSidebarItemVisible={layoutState.isSidebarItemVisible}
              />
            </div>
          </div>
        </main>

        {layoutState.settings.sidebarPosition === 'right' && (
          <LayoutSidebar
            settings={layoutState.settings}
            activeTab={layoutState.activeTab}
            activeTabId={layoutState.activeTabId}
            isExpanded={layoutState.isExpanded}
            currentTabHasPanel={layoutState.currentTabHasPanel}
            pinnedItems={layoutState.settings.pinnedSidebarItems}
            onTabChange={layoutServices.handleTabChange}
            onToggleExpanded={layoutState.handleToggleExpanded}
            onSettingsClick={layoutServices.handleSettingsClick}
            isSidebarItemVisible={layoutState.isSidebarItemVisible}
            onToggleVisibility={layoutState.toggleSidebarItemVisibility}
            onTogglePin={layoutState.toggleSidebarItemPin}
          />
        )}
      </div>

      {layoutState.settings.showStatusBar && <StatusBar />}
      
      {/* Spotlight Search */}
      <SpotlightSearch 
        isOpen={layoutState.isSearchOpen}
        onClose={layoutState.handleCloseSearch}
        onNavigate={layoutServices.handleSearchNavigate}
      />
      
      {/* Toast notifications */}
      <ToastContainer 
        toasts={layoutState.toasts} 
        onDismiss={layoutState.dismissToast}
        position="bottom-right"
        bottomOffset={layoutState.settings.showStatusBar ? "bottom-10" : "bottom-4"}
      />
    </div>
  )
}

export default Layout

EOF

# Create LayoutMainContent.tsx
cat > "src/components/layout/LayoutMainContent.tsx" << 'EOF'
import React from 'react'
import WelcomePage from '@/pages/WelcomePage'
import SettingsPage from '@/pages/settings/SettingsPage'
import { getPageComponent } from '@/config/navigationConfig'
import type { Tab } from '@/types/tab'
import type { AppSettings } from '@/hooks/useSettings'

interface LayoutMainContentProps {
  tabs: Tab[]
  activeTabId: string | null
  settings: AppSettings
  updateSetting: (key: string, value: any) => void
  isSidebarItemVisible: (id: string, defaultVisible?: boolean) => boolean
}

/**
 * Component responsible for rendering the main content area
 * Handles page routing and special cases
 */
const LayoutMainContent: React.FC<LayoutMainContentProps> = ({
  tabs,
  activeTabId,
  settings,
  updateSetting,
  isSidebarItemVisible,
}) => {
  const renderContent = () => {
    // Show welcome page if no tabs are open
    if (tabs.length === 0) {
      return <WelcomePage />
    }

    // If no active tab or active tab no longer exists
    if (!activeTabId || !tabs.some(t => t.id === activeTabId)) {
      return null
    }

    // Special case for settings (needs props)
    if (activeTabId === 'settings') {
      return (
        <SettingsPage
          settings={settings}
          onSettingChange={updateSetting as any}
          isSidebarItemVisible={(id: string) => isSidebarItemVisible(id, true)}
        />
      )
    }

    // Auto-discover page component
    const PageComponent = getPageComponent(activeTabId)
    return PageComponent ? <PageComponent /> : null
  }

  return renderContent()
}

export default LayoutMainContent
EOF

# Create LayoutSidebar.tsx
cat > "src/components/layout/LayoutSidebar.tsx" << 'EOF'
import React, { useMemo } from 'react'
import Sidebar from '@/components/layout/Sidebar'
import SidePanel from '@/components/layout/SidePanel'
import type { AppSettings } from '@/hooks/useSettings'

interface LayoutSidebarProps {
  settings: AppSettings
  activeTab: string
  activeTabId: string | null
  isExpanded: boolean
  currentTabHasPanel: boolean
  pinnedItems: string[]
  onTabChange: (tabId: string) => void
  onToggleExpanded: () => void
  onSettingsClick: () => void
  isSidebarItemVisible: (id: string, defaultVisible?: boolean) => boolean
  onToggleVisibility: (id: string) => void
  onTogglePin: (id: string) => void
}

/**
 * Component responsible for rendering the sidebar and side panel
 * Handles positioning and composition of sidebar elements
 */
const LayoutSidebar: React.FC<LayoutSidebarProps> = ({
  settings,
  activeTab,
  activeTabId,
  isExpanded,
  currentTabHasPanel,
  pinnedItems,
  onTabChange,
  onToggleExpanded,
  onSettingsClick,
  isSidebarItemVisible,
  onToggleVisibility,
  onTogglePin,
}) => {
  const sidebarElements = useMemo(() => {
    const sidebarComponent = (
      <Sidebar
        activeTab={activeTab}
        onTabChange={onTabChange}
        isExpanded={isExpanded}
        onToggleExpanded={onToggleExpanded}
        position={settings.sidebarPosition}
        onSettingsClick={onSettingsClick}
        activeTabId={activeTabId}
        showToggleButton={currentTabHasPanel}
        isSidebarItemVisible={isSidebarItemVisible}
        pinnedItems={pinnedItems}
        onToggleVisibility={onToggleVisibility}
        onTogglePin={onTogglePin}
      />
    )

    const panelComponent = (
      <SidePanel
        activeTab={activeTab}
        isVisible={isExpanded}
        theme={settings.theme}
        sidebarPosition={settings.sidebarPosition}
      />
    )

    return settings.sidebarPosition === 'left' ? (
      <>
        {sidebarComponent}
        {panelComponent}
      </>
    ) : (
      <>
        {panelComponent}
        {sidebarComponent}
      </>
    )
  }, [
    settings.sidebarPosition,
    settings.theme,
    activeTab,
    onTabChange,
    isExpanded,
    onToggleExpanded,
    onSettingsClick,
    activeTabId,
    currentTabHasPanel,
    isSidebarItemVisible,
    pinnedItems,
    onToggleVisibility,
    onTogglePin,
  ])

  return <>{sidebarElements}</>
}

export default LayoutSidebar
EOF

# Create SidePanel.tsx
cat > "src/components/layout/SidePanel.tsx" << 'EOF'
import { getPanelComponent } from '@/config/navigationConfig'
import type { AppSettings } from '@/hooks/useSettings'

interface SidePanelProps {
  activeTab: string
  isVisible: boolean
  theme: AppSettings['theme']
  sidebarPosition: AppSettings['sidebarPosition']
  className?: string
}

const SidePanel = ({
  activeTab,
  isVisible,
  // theme, // theme prop is not used in the provided sample
  sidebarPosition,
  className,
}: SidePanelProps) => {
  const PanelComponent = getPanelComponent(activeTab)

  if (!isVisible || !PanelComponent) {
    return null
  }

  // Panel border should be on the side opposite to sidebar
  const borderClass = sidebarPosition === 'left' ? 'app-border-r' : 'app-border-l'

  return (
    <div
      className={`w-64 bg-surface ${borderClass} ${className || ''}`}
      aria-label={`${activeTab} details panel`}
    >
      <PanelComponent />
    </div>
  )
}

export default SidePanel

EOF

# Create Sidebar.tsx
cat > "src/components/layout/Sidebar.tsx" << 'EOF'
import CollapseButton from '../sidebar/CollapseButton'
import NavigationItems from '../sidebar/NavigationItems'
import SettingsButton from '../sidebar/SettingsButton'

interface SidebarProps {
  activeTab: string
  onTabChange: (tabId: string) => void
  isExpanded: boolean
  onToggleExpanded: () => void
  position: 'left' | 'right'
  onSettingsClick: () => void
  activeTabId?: string | null
  showToggleButton?: boolean
  isSidebarItemVisible?: (itemId: string, defaultVisible: boolean) => boolean
  pinnedItems?: string[]
  onToggleVisibility?: (itemId: string, defaultVisible: boolean) => void
  onTogglePin?: (itemId: string) => void
}

const Sidebar = ({
  activeTab,
  onTabChange,
  isExpanded,
  onToggleExpanded,
  position,
  onSettingsClick,
  activeTabId,
  showToggleButton = true,
  isSidebarItemVisible,
  pinnedItems,
  onToggleVisibility,
  onTogglePin,
}: SidebarProps) => {
  return (
    <div
      className={`w-12 ${
        position === 'left'
          ? 'bg-gradient-to-b from-background to-surface'
          : 'bg-gradient-to-b from-surface to-background'
      } ${position === 'left' ? 'app-border-r' : 'app-border-l'} flex flex-col`}
    >
      {showToggleButton && (
        <CollapseButton isExpanded={isExpanded} position={position} onToggle={onToggleExpanded} />
      )}

      <NavigationItems
        activeTab={activeTab}
        position={position}
        onTabChange={onTabChange}
        isSidebarItemVisible={isSidebarItemVisible}
        pinnedItems={pinnedItems}
        onToggleVisibility={onToggleVisibility}
        onTogglePin={onTogglePin}
      />

      <div className="flex-1" />

      <SettingsButton
        onClick={onSettingsClick}
        isActive={activeTabId === 'settings'}
        position={position}
      />
    </div>
  )
}

export default Sidebar

EOF

# Create StatusBar.tsx
cat > "src/components/layout/StatusBar.tsx" << 'EOF'
const StatusBar = () => {
  return (
    <div className="flex items-center justify-between bg-gradient-to-r from-background to-surface text-text-muted h-6 px-3 text-xs app-border-t">
      <div className="flex items-center space-x-4">
        <span>Ready</span>
        <div className="w-px h-3 separator" aria-hidden="true"></div>
        <span>v1.0.0</span>
      </div>

      <div className="flex items-center space-x-4">
        <span>UTF-8</span>
      </div>
    </div>
  )
}

export default StatusBar

EOF

# Create TitleBar.tsx
cat > "src/components/layout/TitleBar.tsx" << 'EOF'
import React from 'react'
import MenuButton from '@/components/menu/MenuButton'
import AppControls from '@/components/titlebar/AppControls'
import WindowControls from '@/components/titlebar/WindowControls'
import TabBar from '@/components/titlebar/TabBar'
import { usePlatform } from '@/hooks/usePlatform'
import type { AppSettings } from '@/hooks/useSettings'
import type { Tab } from '@/types/tab'

interface TitleBarProps {
  sidebarPosition: AppSettings['sidebarPosition']
  onToggleSidebarPosition: () => void
  theme: AppSettings['theme']
  onToggleTheme: () => void
  onOpenSearch: () => void
  tabs: Tab[]
  onTabClick: (tabId: string) => void
  onTabClose: (tabId: string) => void
  onTabReorder: (newTabs: Tab[]) => void // Made required
  activeTabId?: string | null
  className?: string
}

const TitleBar = ({
  sidebarPosition,
  onToggleSidebarPosition,
  theme,
  onToggleTheme,
  onOpenSearch,
  tabs,
  onTabClick,
  onTabClose,
  onTabReorder,
  activeTabId,
  className,
}: TitleBarProps) => {
  const platformService = usePlatform()

  const handleDoubleClick = () => {
    if (platformService.isElectron()) {
      platformService.maximizeWindow()
    }
  }

  return (
    <header
      className={`flex items-stretch bg-gradient-to-r from-background to-surface text-text h-9 select-none shrink-0 app-border-b relative ${
        className || ''
      }`}
      style={{ WebkitAppRegion: 'drag' } as React.CSSProperties}
      onDoubleClick={handleDoubleClick}
    >
      <div style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}>
        <MenuButton />
      </div>

      <TabBar
        tabs={tabs}
        onTabClick={onTabClick}
        onTabClose={onTabClose}
        onTabReorder={onTabReorder}
        activeTabId={activeTabId}
      />

      {tabs.length > 0 && <div className="w-px h-4 separator mx-1 self-center" aria-hidden="true"></div>}

      <div
        className="flex items-center ml-auto"
        style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}
      >
        <AppControls
          sidebarPosition={sidebarPosition}
          onToggleSidebarPosition={onToggleSidebarPosition}
          theme={theme}
          onToggleTheme={onToggleTheme}
          onOpenSearch={onOpenSearch}
        />
        <WindowControls />
      </div>
    </header>
  )
}

export default TitleBar

EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"#!/bin/bash

#============================================================================
# Detox Tool Component Generator Script
# Category: layout-components
# Description: Layout shell components (Layout, TitleBar, Sidebar, StatusBar)
# Generated by: Task-Writer ScaffoldGenerator
# Implementation Phases: 1, 2
#============================================================================

# Create target directory structure
mkdir -p src/components/layout
mkdir -p src/components/ui
mkdir -p src/components/shared/forms
mkdir -p src/components/shared/generators
mkdir -p src/hooks
mkdir -p src/services
mkdir -p src/config
mkdir -p src/types

echo "🚀 Creating layout-components for detox-tool..."
echo "📁 Target: ./src/"
echo ""

