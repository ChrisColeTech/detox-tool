#!/usr/bin/env node

/**
 * Generate Missing Feature Component Scripts
 * Creates scripts for all the missing feature component directories from task-writer
 */

const fs = require('fs').promises;
const ScaffoldGenerator = require('./ScaffoldGenerator.cjs');

class MissingFeatureGenerator {
  constructor() {
    this.scaffoldGenerator = new ScaffoldGenerator();
  }

  async generateAllFeatureScripts() {
    console.log('üîß Generating Missing Feature Component Scripts');
    console.log('===============================================\n');

    const featureCategories = [
      {
        name: 'spotlight-search',
        sourceDir: '/mnt/c/Projects/task-writer/frontend/app/src/components/features/spotlight-search',
        scriptName: 'create-detox-spotlight-search-features',
        description: 'Spotlight search feature components (SearchInput, SearchResults, SearchEmptyState)',
        targetDir: 'src/components/features/spotlight-search/'
      },
      {
        name: 'tabbar',
        sourceDir: '/mnt/c/Projects/task-writer/frontend/app/src/components/features/tabbar',
        scriptName: 'create-detox-tabbar-features',
        description: 'Tab bar feature components (TabBarScrollable, TabBarControls, TabItem)',
        targetDir: 'src/components/features/tabbar/'
      },
      {
        name: 'welcome',
        sourceDir: '/mnt/c/Projects/task-writer/frontend/app/src/components/features/welcome',
        scriptName: 'create-detox-welcome-features',
        description: 'Welcome page feature components (WelcomeHeader, WelcomeFeatureCard)',
        targetDir: 'src/components/features/welcome/'
      },
      {
        name: 'settings',
        sourceDir: '/mnt/c/Projects/task-writer/frontend/app/src/components/features/settings',
        scriptName: 'create-detox-settings-features',
        description: 'Settings feature components (Settings, AppearanceSettings, SidebarManagement)',
        targetDir: 'src/components/features/settings/'
      }
    ];

    for (const category of featureCategories) {
      await this.generateFeatureScript(category);
    }

    // Update the master script to include feature components
    await this.updateMasterScript(featureCategories);

    console.log('\n‚úÖ All missing feature component scripts generated!');
    console.log('üì¶ Updated master script with new feature scripts');
  }

  async generateFeatureScript(category) {
    try {
      console.log(`üì¶ Generating ${category.name} feature script...`);

      // Check if source exists
      try {
        await fs.access(category.sourceDir);
      } catch {
        console.log(`   ‚ö†Ô∏è  Source directory not found: ${category.sourceDir}`);
        return;
      }

      const result = await this.scaffoldGenerator.generateScaffold(category.sourceDir, {
        targetOS: 'cross-platform',
        includeContent: true,
        scriptName: category.scriptName,
        outputFormat: 'bash',
        supportedFileTypes: ['.tsx', '.ts', '.jsx', '.js'],
        excludeNodeModules: true,
        createDirectoriesOnly: false
      });

      let content = result.scaffolds[0].content;
      
      // Fix file paths to use the correct target directory
      content = content.replace(/cat > "([^"]+)"/g, `cat > "${category.targetDir}$1"`);
      
      // Create the script with proper header
      const script = `#!/bin/bash

#============================================================================
# Detox Tool Feature Component Generator Script
# Category: ${category.name}-features
# Description: ${category.description}
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "üöÄ Creating ${category.name} feature components for detox-tool..."
echo "üìÅ Target: ./src/"

# Create target directory structure
mkdir -p ${category.targetDir}

${content}

echo "‚úÖ ${category.name} feature components created successfully!"
`;

      const scriptPath = `/mnt/c/projects/detox-tool/frontend/docs/${category.scriptName}.sh`;
      await fs.writeFile(scriptPath, script);
      
      // Make executable
      const { exec } = require('child_process');
      exec(`chmod +x "${scriptPath}"`);

      console.log(`   ‚úÖ Generated ${category.scriptName}.sh`);

    } catch (error) {
      console.log(`   ‚ùå Failed to generate ${category.name}: ${error.message}`);
    }
  }

  async updateMasterScript(newCategories) {
    try {
      const masterPath = '/mnt/c/projects/detox-tool/frontend/docs/run-all-component-scripts.sh';
      let masterContent = await fs.readFile(masterPath, 'utf-8');

      // Add new scripts to the array
      const newScripts = newCategories.map(cat => `"${cat.scriptName}.sh"`);
      
      // Find the scripts array and update it
      const scriptsArrayMatch = masterContent.match(/scripts=\(\s*([\s\S]*?)\s*\)/);
      if (scriptsArrayMatch) {
        const currentScripts = scriptsArrayMatch[1]
          .split('\n')
          .map(line => line.trim())
          .filter(line => line && !line.startsWith('#'))
          .map(line => line.replace(/"/g, ''));

        const allScripts = [
          ...currentScripts,
          ...newScripts.map(s => s.replace(/"/g, ''))
        ];

        const newScriptsArray = `scripts=(\n    ${allScripts.map(s => `"${s}"`).join('\n    ')}\n)`;
        
        masterContent = masterContent.replace(/scripts=\(\s*[\s\S]*?\s*\)/, newScriptsArray);
        
        await fs.writeFile(masterPath, masterContent);
        console.log('   ‚úÖ Updated master script with feature components');
      }

    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Could not update master script: ${error.message}`);
    }
  }
}

// Run if called directly
async function main() {
  const generator = new MissingFeatureGenerator();
  await generator.generateAllFeatureScripts();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = MissingFeatureGenerator;