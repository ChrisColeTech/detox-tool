#!/bin/bash

#============================================================================
# Detox Tool Feature Component Generator Script
# Category: tabbar-features
# Description: Tab bar feature components (TabBarScrollable, TabBarControls, TabItem)
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating tabbar feature components for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/components/features/tabbar/

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.403Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/features/tabbar
# Target OS: cross-platform
# Directories: 0
# Files: 3
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create TabBarControls.tsx
cat > "src/components/features/tabbar/TabBarControls.tsx" << 'EOF'
import React from 'react'
import { ChevronLeft, ChevronRight } from 'lucide-react'

interface TabBarControlsProps {
  canScrollLeft: boolean
  canScrollRight: boolean
  onScrollLeft: () => void
  onScrollRight: () => void
}

/**
 * Component for tab bar scroll controls
 * Follows architecture guide principles:
 * - Single responsibility: Scroll control buttons
 * - Under 150 lines
 * - Clean props interface
 * - No business logic
 */
const TabBarControls: React.FC<TabBarControlsProps> = ({
  canScrollLeft,
  canScrollRight,
  onScrollLeft,
  onScrollRight,
}) => {
  if (!canScrollLeft && !canScrollRight) {
    return null
  }

  return (
    <>
      {/* Left scroll button */}
      {canScrollLeft && (
        <button
          onClick={onScrollLeft}
          className="flex-shrink-0 w-8 h-full flex items-center justify-center bg-surface-hover hover:bg-surface text-text-muted hover:text-text app-border-r transition-colors"
          aria-label="Scroll tabs left"
        >
          <ChevronLeft className="w-4 h-4" />
        </button>
      )}
      
      {/* Right scroll button */}
      {canScrollRight && (
        <button
          onClick={onScrollRight}
          className="flex-shrink-0 w-8 h-full flex items-center justify-center bg-surface-hover hover:bg-surface text-text-muted hover:text-text app-border-l transition-colors"
          aria-label="Scroll tabs right"
        >
          <ChevronRight className="w-4 h-4" />
        </button>
      )}
    </>
  )
}

export default TabBarControls
EOF

# Create TabBarScrollable.tsx
cat > "src/components/features/tabbar/TabBarScrollable.tsx" << 'EOF'
import React from 'react'
import {
  SortableContext,
  horizontalListSortingStrategy,
} from '@dnd-kit/sortable'
import TabItem from './TabItem'
import type { Tab } from '@/types/tab'

interface TabBarScrollableProps {
  tabs: Tab[]
  activeTabId?: string | null
  onTabClick: (tabId: string) => void
  onTabClose: (tabId: string) => void
  scrollContainerRef: React.RefObject<HTMLDivElement | null>
}

/**
 * Component for scrollable tab container with sortable support
 * Follows architecture guide principles:
 * - Single responsibility: Scrollable tab container
 * - Under 150 lines
 * - Clean props interface
 * - Encapsulates dnd-kit sortable context
 */
const TabBarScrollable: React.FC<TabBarScrollableProps> = ({
  tabs,
  activeTabId,
  onTabClick,
  onTabClose,
  scrollContainerRef,
}) => {
  return (
    <div
      ref={scrollContainerRef}
      className="flex-1 overflow-x-auto overflow-y-hidden scrollbar-thin scrollbar-thumb-border scrollbar-track-transparent"
      style={{ scrollbarWidth: 'thin' }}
    >
      <SortableContext items={tabs.map(tab => tab.id)} strategy={horizontalListSortingStrategy}>
        <div className="flex h-full min-w-max">
          {tabs.map((tab, index) => (
            <TabItem
              key={tab.id}
              tab={tab}
              isActive={tab.id === activeTabId}
              onTabClick={onTabClick}
              onTabClose={onTabClose}
              isFirst={index === 0}
            />
          ))}
        </div>
      </SortableContext>
    </div>
  )
}

export default TabBarScrollable
EOF

# Create TabItem.tsx
cat > "src/components/features/tabbar/TabItem.tsx" << 'EOF'
import React from 'react'
import { useSortable } from '@dnd-kit/sortable'
import { CSS } from '@dnd-kit/utilities'
import { X } from 'lucide-react'
import type { Tab } from '@/types/tab'

interface TabItemProps {
  tab: Tab
  isActive: boolean
  onTabClick: (tabId: string) => void
  onTabClose: (tabId: string) => void
  isFirst?: boolean
}

/**
 * Component for individual tab item with drag and drop support
 * Follows architecture guide principles:
 * - Single responsibility: Individual tab rendering
 * - Under 150 lines
 * - Clean props interface
 * - Encapsulates dnd-kit sortable logic
 */
const TabItem: React.FC<TabItemProps> = ({
  tab,
  isActive,
  onTabClick,
  onTabClose,
  isFirst = false,
}) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: tab.id })

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
    borderTop: isActive ? '2px solid var(--accent)' : '2px solid transparent',
  }

  const handleTabClose = (e: React.MouseEvent) => {
    e.stopPropagation()
    onTabClose(tab.id)
  }

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      className={`flex items-center gap-2 px-4 py-1 min-w-0 max-w-48 app-border-r cursor-pointer group relative transition-colors h-full ${
        !isFirst ? 'app-border-l' : ''
      } ${
        isActive
          ? 'bg-background text-text active-tab-break'
          : 'bg-surface-hover text-text-muted hover:bg-surface hover:text-text'
      }`}
      onClick={() => onTabClick(tab.id)}
      role="tab"
      aria-selected={isActive}
      tabIndex={isActive ? 0 : -1}
    >
      {/* Tab Icon */}
      {tab.icon && (
        <div className="w-4 h-4 flex-shrink-0">
          {tab.icon}
        </div>
      )}
      
      {/* Tab Label */}
      <span className="truncate text-sm font-medium">
        {tab.label}
      </span>
      
      {/* Close Button */}
      {tab.closable && (
        <button
          onClick={handleTabClose}
          className={`flex-shrink-0 w-4 h-4 flex items-center justify-center rounded hover:bg-black/10 dark:hover:bg-white/10 transition-colors ${
            isActive ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'
          }`}
          aria-label={`Close ${tab.label} tab`}
          tabIndex={-1}
        >
          <X className="w-3 h-3" />
        </button>
      )}
    </div>
  )
}

export default TabItem
EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ tabbar feature components created successfully!"
