#!/bin/bash

#============================================================================
# Detox Tool Feature Component Generator Script
# Category: settings-features
# Description: Settings feature components (Settings, AppearanceSettings, SidebarManagement)
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating settings feature components for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/components/features/settings/

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.442Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/features/settings
# Target OS: cross-platform
# Directories: 0
# Files: 3
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create AppearanceSettings.tsx
cat > "src/components/features/settings/AppearanceSettings.tsx" << 'EOF'
import React from 'react'
import { Monitor } from 'lucide-react'
import { Switch } from '@/components/ui/switch'
import { Select, type SelectOption } from '@/components/ui/select'
import { SettingsSection, FormField } from '@/components/shared/forms'
import type { AppSettings, ColorScheme } from '@/hooks/useSettings'

interface AppearanceSettingsProps {
  settings: AppSettings
  onSettingChange: <K extends keyof AppSettings>(key: K, value: AppSettings[K]) => void
}

/**
 * Component for appearance and visual settings
 * Uses shared form components for consistent UI
 * Follows architecture guide principles:
 * - Single responsibility: Appearance configuration UI
 * - Under 150 lines (now much smaller via composition)
 * - Clean props interface
 * - Reuses shared form components
 */
const AppearanceSettings: React.FC<AppearanceSettingsProps> = ({
  settings,
  onSettingChange,
}) => {
  const themeOptions: SelectOption[] = [
    { value: 'dark', label: 'Dark' },
    { value: 'light', label: 'Light' },
  ]

  const colorSchemeOptions: SelectOption[] = [
    { value: 'onyx', label: 'Onyx' },
    { value: 'ocean-blue', label: 'Ocean Blue' },
    { value: 'forest-green', label: 'Forest Green' },
    { value: 'royal-purple', label: 'Royal Purple' },
    { value: 'sunset-orange', label: 'Sunset Orange' },
    { value: 'cyberpunk', label: 'Cyberpunk' },
    { value: 'office', label: 'Office' },
    { value: 'terminal', label: 'Terminal' },
    { value: 'midnight-blue', label: 'Midnight Blue' },
    { value: 'crimson-red', label: 'Crimson Red' },
    { value: 'warm-sepia', label: 'Warm Sepia' },
    { value: 'rose-gold', label: 'Rose Gold' },
  ]

  const fontSizeOptions: SelectOption[] = [
    { value: 'small', label: 'Small' },
    { value: 'medium', label: 'Medium' },
    { value: 'large', label: 'Large' },
  ]

  const iconSizeOptions: SelectOption[] = [
    { value: 'small', label: 'Small' },
    { value: 'medium', label: 'Medium' },
    { value: 'large', label: 'Large' },
  ]

  const borderThicknessOptions: SelectOption[] = [
    { value: 'none', label: 'None' },
    { value: 'thin', label: 'Thin' },
    { value: 'medium', label: 'Medium' },
    { value: 'thick', label: 'Thick' },
  ]

  const sidebarPositionOptions: SelectOption[] = [
    { value: 'left', label: 'Left' },
    { value: 'right', label: 'Right' },
  ]

  return (
    <SettingsSection
      icon={Monitor}
      title="Appearance"
    >
      {/* Theme Selection */}
      <FormField label="Theme">
        <Select
          value={settings.theme}
          onValueChange={(value) => onSettingChange('theme', value as AppSettings['theme'])}
          options={themeOptions}
          placeholder="Select theme"
        />
      </FormField>

      {/* Color Scheme Selection */}
      <FormField label="Color Scheme">
        <Select
          value={settings.colorScheme}
          onValueChange={(value) => onSettingChange('colorScheme', value as ColorScheme)}
          options={colorSchemeOptions}
          placeholder="Select color scheme"
        />
      </FormField>

      {/* High Contrast */}
      <FormField
        label="High Contrast"
        description="Increase contrast for better accessibility"
        layout="horizontal"
      >
        <Switch
          checked={settings.highContrast}
          onCheckedChange={(checked) => onSettingChange('highContrast', checked)}
        />
      </FormField>

      {/* Font Size */}
      <FormField label="Font Size">
        <Select
          value={settings.fontSize}
          onValueChange={(value) => onSettingChange('fontSize', value as AppSettings['fontSize'])}
          options={fontSizeOptions}
          placeholder="Select font size"
        />
      </FormField>

      {/* Icon Size */}
      <FormField label="Icon Size">
        <Select
          value={settings.iconSize}
          onValueChange={(value) => onSettingChange('iconSize', value as AppSettings['iconSize'])}
          options={iconSizeOptions}
          placeholder="Select icon size"
        />
      </FormField>

      {/* Border Thickness */}
      <FormField label="Border Thickness">
        <Select
          value={settings.borderThickness}
          onValueChange={(value) => onSettingChange('borderThickness', value as AppSettings['borderThickness'])}
          options={borderThicknessOptions}
          placeholder="Select border thickness"
        />
      </FormField>

      {/* Sidebar Position */}
      <FormField label="Sidebar Position">
        <Select
          value={settings.sidebarPosition}
          onValueChange={(value) => onSettingChange('sidebarPosition', value as AppSettings['sidebarPosition'])}
          options={sidebarPositionOptions}
          placeholder="Select sidebar position"
        />
      </FormField>

      {/* Status Bar */}
      <FormField
        label="Show Status Bar"
        description="Display status information at the bottom"
        layout="horizontal"
      >
        <Switch
          checked={settings.showStatusBar}
          onCheckedChange={(checked) => onSettingChange('showStatusBar', checked)}
        />
      </FormField>
    </SettingsSection>
  )
}

export default AppearanceSettings
EOF

# Create Settings.tsx
cat > "src/components/features/settings/Settings.tsx" << 'EOF'
import React from 'react'
import AppearanceSettings from './AppearanceSettings'
import SidebarManagement from './SidebarManagement'
import type { AppSettings } from '@/hooks/useSettings'

interface SettingsProps {
  settings: AppSettings
  onSettingChange: <K extends keyof AppSettings>(key: K, value: AppSettings[K]) => void
  isSidebarItemVisible: (itemId: string, defaultVisible: boolean) => boolean
  onToggleVisibility: (itemId: string) => void
  onTogglePin: (itemId: string) => void
}

/**
 * Main Settings component - orchestrates the settings feature
 * Follows architecture guide principles:
 * - Single responsibility: Settings feature orchestration
 * - Under 150 lines
 * - Composition over complex logic
 * - Clean separation of concerns
 */
const Settings: React.FC<SettingsProps> = ({
  settings,
  onSettingChange,
  isSidebarItemVisible,
  onToggleVisibility,
  onTogglePin,
}) => {
  return (
    <div className="space-y-8">
      {/* Appearance Section */}
      <AppearanceSettings
        settings={settings}
        onSettingChange={onSettingChange}
      />

      {/* Sidebar Management Section */}
      <SidebarManagement
        isSidebarItemVisible={isSidebarItemVisible}
        pinnedSidebarItems={settings.pinnedSidebarItems}
        onToggleVisibility={onToggleVisibility}
        onTogglePin={onTogglePin}
      />
    </div>
  )
}

export default Settings
EOF

# Create SidebarManagement.tsx
cat > "src/components/features/settings/SidebarManagement.tsx" << 'EOF'
import React from 'react'
import { Menu, Eye, EyeOff, RotateCcw } from 'lucide-react'
import { motion, useReducedMotion } from 'framer-motion'
import { Switch } from '@/components/ui/switch'
import { useSidebarManagement, type SidebarItem } from '@/hooks/useSidebarManagement'

interface SidebarManagementProps {
  isSidebarItemVisible: (itemId: string, defaultVisible: boolean) => boolean
  pinnedSidebarItems: string[]
  onToggleVisibility: (itemId: string) => void
  onTogglePin: (itemId: string) => void
}

/**
 * Component for managing sidebar items visibility and pinning
 * Follows architecture guide principles:
 * - Single responsibility: Sidebar management UI
 * - Under 200 lines
 * - Clean props interface
 * - Uses custom hook for logic
 * - Feature card pattern compliance
 */
const SidebarManagement: React.FC<SidebarManagementProps> = ({
  isSidebarItemVisible,
  pinnedSidebarItems,
  onToggleVisibility,
  onTogglePin,
}) => {
  const sidebarManagement = useSidebarManagement({
    isSidebarItemVisible,
    pinnedSidebarItems,
    onToggleVisibility,
    onTogglePin,
  })
  
  const prefersReducedMotion = useReducedMotion()

  const cardVariants = {
    initial: prefersReducedMotion ? {} : { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: prefersReducedMotion ? { duration: 0 } : { duration: 0.3 }
  }

  const SidebarItemRow: React.FC<{ item: SidebarItem }> = ({ item }) => (
    <div className="flex items-center justify-between p-3 app-border rounded-md bg-surface hover:bg-surface-hover transition-colors">
      <div className="flex items-center gap-3">
        {item.icon && <div className="w-4 h-4">{item.icon}</div>}
        <span className="text-sm font-medium text-text">{item.label}</span>
        {item.pinned && (
          <span className="px-2 py-1 bg-accent/10 text-accent text-xs rounded">Pinned</span>
        )}
      </div>
      
      <div className="flex items-center gap-2">
        <Switch
          checked={item.visible}
          onCheckedChange={() => onToggleVisibility(item.id)}
        />
        <button
          onClick={() => onTogglePin(item.id)}
          className={`p-1 rounded transition-colors ${
            item.pinned 
              ? 'text-accent hover:text-accent-hover' 
              : 'text-text-muted hover:text-accent'
          }`}
          title={item.pinned ? 'Unpin item' : 'Pin item'}
        >
          <RotateCcw className="w-4 h-4" />
        </button>
      </div>
    </div>
  )

  return (
    <motion.article
      variants={cardVariants}
      initial="initial"
      animate="animate"
      className="bg-surface app-border overflow-hidden transition-all duration-300 group motion-safe:hover:shadow-theme motion-safe:hover:scale-[1.02]"
      aria-labelledby="sidebar-management-title"
      role="region"
    >
      {/* Feature Card Header */}
      <div className="bg-gradient-to-r from-surface to-background px-6 py-4 app-border-b">
        <div className="flex items-center gap-3">
          <div className="page-icon transition-transform duration-300 motion-safe:group-hover:scale-110" role="img" aria-hidden="true">
            <Menu className="w-6 h-6 text-accent motion-safe:group-hover:text-accent-hover transition-colors" />
          </div>
          <h2 id="sidebar-management-title" className="text-xl font-semibold text-text">
            Sidebar Management
          </h2>
        </div>
      </div>
      
      {/* Feature Card Content */}
      <div className="p-6 space-y-6">

      {/* Statistics */}
      <div className="grid grid-cols-4 gap-4">
        <div className="text-center p-3 bg-surface app-border rounded-md">
          <div className="text-lg font-bold text-text">{sidebarManagement.stats.total}</div>
          <div className="text-xs text-text-muted">Total</div>
        </div>
        <div className="text-center p-3 bg-surface app-border rounded-md">
          <div className="text-lg font-bold text-accent">{sidebarManagement.stats.visible}</div>
          <div className="text-xs text-text-muted">Visible</div>
        </div>
        <div className="text-center p-3 bg-surface app-border rounded-md">
          <div className="text-lg font-bold text-text-muted">{sidebarManagement.stats.hidden}</div>
          <div className="text-xs text-text-muted">Hidden</div>
        </div>
        <div className="text-center p-3 bg-surface app-border rounded-md">
          <div className="text-lg font-bold text-accent">{sidebarManagement.stats.pinned}</div>
          <div className="text-xs text-text-muted">Pinned</div>
        </div>
      </div>

      {/* Visible Items */}
      {sidebarManagement.visibleItems.length > 0 && (
        <div className="space-y-3">
          <div className="flex items-center gap-2">
            <Eye className="w-4 h-4 text-accent" />
            <h4 className="font-semibold text-text">Visible Items</h4>
            <span className="text-sm text-text-muted">({sidebarManagement.visibleItems.length})</span>
          </div>
          
          <div className="space-y-2">
            {sidebarManagement.visibleItems.map((item) => (
              <SidebarItemRow key={item.id} item={item} />
            ))}
          </div>
        </div>
      )}

      {/* Hidden Items */}
      {sidebarManagement.hiddenItems.length > 0 && (
        <div className="space-y-3">
          <div className="flex items-center gap-2">
            <EyeOff className="w-4 h-4 text-text-muted" />
            <h4 className="font-semibold text-text">Hidden Items</h4>
            <span className="text-sm text-text-muted">({sidebarManagement.hiddenItems.length})</span>
          </div>
          
          <div className="space-y-2">
            {sidebarManagement.hiddenItems.map((item) => (
              <SidebarItemRow key={item.id} item={item} />
            ))}
          </div>
        </div>
      )}

        {/* Help Text */}
        <div className="p-3 bg-surface app-border rounded-md">
          <p className="text-sm text-text-muted">
            Toggle visibility to show or hide sidebar items. Pin items to keep them at the top of the sidebar.
          </p>
        </div>
      </div>
    </motion.article>
  )
}

export default SidebarManagement
EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ settings feature components created successfully!"
