#!/bin/bash

#============================================================================
# Detox Tool Feature Component Generator Script
# Category: spotlight-search-features
# Description: Spotlight search feature components (SearchInput, SearchResults, SearchEmptyState)
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating spotlight-search feature components for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/components/features/spotlight-search/

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.382Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/features/spotlight-search
# Target OS: cross-platform
# Directories: 0
# Files: 3
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create SearchEmptyState.tsx
cat > "src/components/features/spotlight-search/SearchEmptyState.tsx" << 'EOF'
import React from 'react'
import { Search } from 'lucide-react'

interface SearchEmptyStateProps {
  query: string
}

/**
 * Component for displaying empty state when no search results found
 * Follows architecture guide principles:
 * - Single responsibility: Empty state display
 * - Under 150 lines
 * - Clean props interface
 * - No business logic
 */
const SearchEmptyState: React.FC<SearchEmptyStateProps> = ({ query }) => {
  if (!query.trim()) {
    return null
  }

  return (
    <div className="p-6 text-center">
      <div className="page-icon mx-auto mb-3" role="img" aria-label="No results">
        <Search className="w-6 h-6 text-text-muted" aria-hidden="true" />
      </div>
      <p className="text-text-muted">No results found</p>
      <p className="text-sm text-text-muted mt-1">
        Try searching for features, pages, or settings
      </p>
    </div>
  )
}

export default SearchEmptyState
EOF

# Create SearchInput.tsx
cat > "src/components/features/spotlight-search/SearchInput.tsx" << 'EOF'
import React from 'react'
import { Search } from 'lucide-react'

interface SearchInputProps {
  query: string
  onChange: (query: string) => void
  onKeyDown: (event: React.KeyboardEvent) => void
  inputRef: React.RefObject<HTMLInputElement | null>
  placeholder?: string
}

/**
 * Component for spotlight search input field
 * Follows architecture guide principles:
 * - Single responsibility: Search input handling
 * - Under 150 lines
 * - Clean props interface
 * - No business logic
 */
const SearchInput: React.FC<SearchInputProps> = ({
  query,
  onChange,
  onKeyDown,
  inputRef,
  placeholder = "Search Task Writer...",
}) => {
  return (
    <div className="bg-gradient-to-r from-surface to-background px-6 py-4 app-border-b">
      <div className="flex items-center gap-3">
        <div className="page-icon" role="img" aria-label="Search icon">
          <Search className="w-5 h-5 text-accent" aria-hidden="true" />
        </div>
        <input
          ref={inputRef}
          type="text"
          value={query}
          onChange={(e) => onChange(e.target.value)}
          onKeyDown={onKeyDown}
          placeholder={placeholder}
          className="flex-1 bg-surface text-text placeholder-text-muted app-border rounded-md px-3 py-2 text-base font-medium focus:outline-none focus:ring-0 focus-visible:outline-none focus:app-border-accent"
          style={{ boxShadow: 'none !important' }}
          aria-label="Search application features"
          autoComplete="off"
          spellCheck="false"
        />
      </div>
    </div>
  )
}

export default SearchInput
EOF

# Create SearchResults.tsx
cat > "src/components/features/spotlight-search/SearchResults.tsx" << 'EOF'
import React from 'react'
import { motion, useReducedMotion } from 'framer-motion'
import { Hash, Folder, Settings as SettingsIcon, Zap, FileText, Code, Layers } from 'lucide-react'
import type { SearchResult } from '@/data/searchData'

interface SearchResultsProps {
  results: SearchResult[]
  selectedIndex: number
  onSelect: (result: SearchResult) => void
}

const getCategoryIcon = (category: string) => {
  switch (category) {
    case 'Navigation': return Hash
    case 'Tools': return Zap
    case 'Features': return FileText
    case 'Configuration': return SettingsIcon
    case 'Organization': return Folder
    case 'Preview': return Code
    case 'Options': return Layers
    case 'Appearance': return Layers
    case 'Accessibility': return SettingsIcon
    case 'Layout': return Folder
    case 'Core': return Zap
    case 'Export': return FileText
    case 'Interaction': return Hash
    case 'Help': return FileText
    case 'Reference': return Code
    case 'Templates': return Folder
    default: return Hash
  }
}

/**
 * Component for displaying spotlight search results
 * Follows architecture guide principles:
 * - Single responsibility: Search results display
 * - Under 150 lines
 * - Clean props interface
 * - No business logic
 */
const SearchResults: React.FC<SearchResultsProps> = ({
  results,
  selectedIndex,
  onSelect,
}) => {
  const prefersReducedMotion = useReducedMotion()

  if (results.length === 0) {
    return null
  }

  return (
    <div className="p-6 space-y-2 max-h-80 overflow-y-auto">
      {results.map((result, index) => {
        const IconComponent = getCategoryIcon(result.category)
        const isSelected = index === selectedIndex
        
        return (
          <motion.div
            key={result.id}
            initial={prefersReducedMotion ? {} : { opacity: 0, x: -10 }}
            animate={{ opacity: 1, x: 0 }}
            transition={prefersReducedMotion ? { duration: 0 } : { duration: 0.2, delay: index * 0.05 }}
            className={`flex items-center gap-3 px-4 py-3 rounded-md cursor-pointer transition-all duration-300 group focus-within:ring-2 focus-within:ring-accent ${
              isSelected 
                ? 'bg-accent text-text-background motion-safe:scale-[1.02]' 
                : 'hover:bg-surface-hover motion-safe:hover:scale-[1.01]'
            }`}
            onClick={() => onSelect(result)}
            role="option"
            aria-selected={isSelected}
            tabIndex={-1}
          >
            <div className={`page-icon transition-transform duration-300 motion-safe:group-hover:scale-110 ${
              isSelected 
                ? 'bg-text-background/20' 
                : ''
            }`} role="img" aria-hidden="true">
              <IconComponent 
                className={`w-5 h-5 ${
                  isSelected ? 'text-text-background' : 'text-accent'
                }`}
                aria-hidden="true"
              />
            </div>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 mb-1">
                <h3 className={`font-semibold truncate ${
                  isSelected ? 'text-text-background' : 'text-text'
                }`}>
                  {result.title}
                </h3>
                <span className={`text-xs px-2 py-0.5 rounded-full ${
                  isSelected 
                    ? 'bg-text-background/20 text-text-background/80' 
                    : 'bg-surface text-text-muted'
                }`}>
                  {result.category}
                </span>
              </div>
              <p className={`text-sm truncate ${
                isSelected ? 'text-text-background/80' : 'text-text-muted'
              }`}>
                {result.description}
              </p>
            </div>
          </motion.div>
        )
      })}
    </div>
  )
}

export default SearchResults
EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ spotlight-search feature components created successfully!"
