#!/bin/bash

#============================================================================
# Detox Tool Component Generator Script
# Category: electron-types
# Description: TypeScript type definitions
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating electron-types for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/types/
mkdir -p src/components/search
mkdir -p src/components/sidebar
mkdir -p src/components/menu
mkdir -p src/components/titlebar
mkdir -p src/pages/settings
mkdir -p src/contexts
mkdir -p src/utils
mkdir -p src/data
mkdir -p src/lib
mkdir -p src/types

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.253Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/types
# Target OS: cross-platform
# Directories: 0
# Files: 3
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create electron-api.d.ts
cat > "src/types/electron-api.d.ts" << 'EOF'
export interface FileQueueItem {
  id: string
  name: string
  content: string
  path?: string
  timestamp: number
  type?: string
}

export interface ElectronAPI {
  storage: {
    saveSettings: (settings: Record<string, unknown>) => Promise<void>
    loadSettings: () => Promise<Record<string, unknown> | null>
  }
  file: {
    openFile: () => Promise<{ path: string; content: string } | null>
    saveFile: (path: string, content: string) => Promise<boolean>
    saveFileAs: (content: string) => Promise<{ path: string; success: boolean } | null>
  }
  fileQueue: {
    saveFileQueue: (queue: FileQueueItem[]) => Promise<void>
    loadFileQueue: () => Promise<FileQueueItem[] | null>
    exportFileQueue: (queue: FileQueueItem[]) => Promise<string | null>
    importFileQueue: () => Promise<FileQueueItem[] | null>
  }
  window: {
    minimize: () => void
    maximize: () => void // Should toggle maximize/unmaximize
    unmaximize: () => void // Specific unmaximize
    close: () => void
    isMaximized: () => boolean // Changed to Promise in service
  }
  dialog: {
    showSaveDialog: (defaultPath?: string) => Promise<string | null>
    showOpenDialog: () => Promise<string[] | null> // Assuming can return multiple paths
    showMessageBox: (message: string, type?: 'info' | 'warning' | 'error') => Promise<void> // 'type' is optional
  }
  app: {
    getVersion: () => string
    getPath: () => string // e.g., app path, userData path
  }
  dev: {
    openDevTools: () => void
    reload: () => void
  }
  // Added based on preload.js for API process control
  startApiProcess: () => Promise<boolean>
  stopApiProcess: () => Promise<boolean>
  restartApiProcess: () => Promise<boolean>
  getApiStatus: () => Promise<{ isRunning: boolean; pid: number | null }>
  // Added based on preload.js for window state changes
  onWindowStateChange: (callback: (state: { isMaximized: boolean }) => void) => () => void
  
  // Task Writer specific APIs
  selectDirectory: () => Promise<{ canceled: boolean; filePaths: string[] } | null>
  scanDirectory: (path: string, settings: any) => Promise<{ tree: any[]; stats: any } | null>
  exportScanResults: (tree: any[], stats: any) => Promise<{ success: boolean; filePath: string } | null>
  generateTasks: (path: string, settings: any) => Promise<{ tasks: any[]; stats: any } | null>
  exportTasks: (tasks: any[], format: string) => Promise<{ success: boolean; directory: string } | null>
  exportSingleTask: (task: any) => Promise<{ success: boolean; filePath: string } | null>
  generateScaffold: (path: string, settings: any) => Promise<{ scaffolds: any[]; stats: any } | null>
  exportScaffolds: (scaffolds: any[]) => Promise<{ success: boolean; directory: string } | null>
  exportSingleScaffold: (scaffold: any) => Promise<{ success: boolean; filePath: string } | null>
}

declare global {
  interface Window {
    electronAPI?: ElectronAPI
  }
}

EOF

# Create navigation.ts
cat > "src/types/navigation.ts" << 'EOF'
import type { ElementType } from 'react'

// Configuration interface (what pages export)
export interface NavigationConfig {
  id: string
  label: string
  iconComponent?: ElementType // Use ElementType directly
  showInSidebar: boolean
  defaultVisible?: boolean // Whether this item should be visible by default (overrides showInSidebar for initial state)
  order?: number
  position?: 'left' | 'right'
  group?: string
  closable?: boolean
}

export interface NavigationItem extends NavigationConfig {
  page: React.ComponentType<unknown>
  panel?: React.ComponentType<unknown>
}

EOF

# Create tab.ts
cat > "src/types/tab.ts" << 'EOF'
import * as React from 'react'

export interface Tab {
  id: string
  title: string
  label: string
  icon?: React.ReactNode
  isActive: boolean
  closable?: boolean // Added based on useTabs implementation
}

EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ electron-types components created successfully!"
