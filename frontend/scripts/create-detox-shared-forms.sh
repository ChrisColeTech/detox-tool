#!/bin/bash

#============================================================================
# Detox Tool Shared Forms Generator Script
# Category: shared-forms
# Description: Shared form components (FormField, SettingsSection, etc.)
# Generated by: Task-Writer ScaffoldGenerator
#============================================================================

echo "🚀 Creating shared forms components for detox-tool..."
echo "📁 Target: ./src/"

# Create target directory structure
mkdir -p src/components/shared/forms

#!/bin/bash

# Scaffold script generated by Task Writer
# Generated on: 2025-07-01T01:16:17.594Z
# Source directory: /mnt/c/Projects/task-writer/frontend/app/src/components/shared/forms
# Target OS: cross-platform
# Directories: 0
# Files: 9
#
# This script will recreate the directory structure and files
# including the original file contents.

# Create files
# Create CheckboxGroup.tsx
cat > "src/components/shared/forms/CheckboxGroup.tsx" << 'EOF'
import React from 'react'

interface CheckboxOption {
  id: string
  label: string
  description?: string
  checked: boolean
  onChange: (checked: boolean) => void
}

interface CheckboxGroupProps {
  title: string
  options: CheckboxOption[]
  layout?: 'vertical' | 'horizontal'
}

/**
 * Shared component for checkbox groups
 * Follows architecture guide principles:
 * - Single responsibility: Checkbox group layout
 * - Under 100 lines
 * - Clean props interface
 * - Consistent styling
 */
const CheckboxGroup: React.FC<CheckboxGroupProps> = ({
  title,
  options,
  layout = 'vertical',
}) => {
  return (
    <div className="space-y-4">
      <h4 className="text-md font-semibold text-text">{title}</h4>
      
      <div className={`space-y-3 ${layout === 'horizontal' ? 'sm:flex sm:flex-wrap sm:gap-6 sm:space-y-0' : ''}`}>
        {options.map((option) => (
          <label key={option.id} className="flex items-center gap-3">
            <input
              type="checkbox"
              checked={option.checked}
              onChange={(e) => option.onChange(e.target.checked)}
              className="w-4 h-4 text-accent app-border rounded focus:ring-2 focus:ring-accent"
            />
            <div className="flex-1">
              <span className="text-sm text-text">{option.label}</span>
              {option.description && (
                <p className="text-xs text-text-muted mt-1">{option.description}</p>
              )}
            </div>
          </label>
        ))}
      </div>
    </div>
  )
}

export default CheckboxGroup
EOF

# Create FormField.tsx
cat > "src/components/shared/forms/FormField.tsx" << 'EOF'
import React from 'react'

interface FormFieldProps {
  label: string
  description?: string
  children: React.ReactNode
  layout?: 'vertical' | 'horizontal'
  required?: boolean
}

/**
 * Shared component for form field layout
 * Follows architecture guide principles:
 * - Single responsibility: Form field layout and labeling
 * - Under 50 lines
 * - Clean props interface
 * - Consistent spacing and typography
 */
const FormField: React.FC<FormFieldProps> = ({
  label,
  description,
  children,
  layout = 'vertical',
  required = false,
}) => {
  if (layout === 'horizontal') {
    return (
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <label className="text-sm font-medium text-text">
            {label}
            {required && <span className="text-red-400 ml-1">*</span>}
          </label>
          {description && (
            <p className="text-xs text-text-muted">{description}</p>
          )}
        </div>
        <div className="flex-shrink-0">
          {children}
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-3">
      <label className="text-sm font-medium text-text">
        {label}
        {required && <span className="text-red-400 ml-1">*</span>}
      </label>
      {description && (
        <p className="text-xs text-text-muted mb-2">{description}</p>
      )}
      {children}
    </div>
  )
}

export default FormField
EOF

# Create KeyValueList.tsx
cat > "src/components/shared/forms/KeyValueList.tsx" << 'EOF'
import React, { useState } from 'react'
import { Plus, X } from 'lucide-react'
import { Button } from '@/components/ui/Button'
import TextInput from './TextInput'

interface KeyValueListProps {
  title: string
  items: Record<string, string>
  onAddItem: (key: string, value: string) => void
  onRemoveItem: (key: string) => void
  keyPlaceholder?: string
  valuePlaceholder?: string
  emptyMessage?: string
}

/**
 * Shared component for managing key-value pairs
 * Follows architecture guide principles:
 * - Single responsibility: Key-value pair management
 * - Under 150 lines
 * - Clean props interface
 * - Add/remove functionality
 */
const KeyValueList: React.FC<KeyValueListProps> = ({
  title,
  items,
  onAddItem,
  onRemoveItem,
  keyPlaceholder = "Key",
  valuePlaceholder = "Value",
  emptyMessage = "No items added yet",
}) => {
  const [newKey, setNewKey] = useState('')
  const [newValue, setNewValue] = useState('')

  const handleAdd = () => {
    if (newKey.trim() && newValue.trim()) {
      onAddItem(newKey.trim(), newValue.trim())
      setNewKey('')
      setNewValue('')
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleAdd()
    }
  }

  return (
    <div className="space-y-4">
      <h4 className="text-md font-semibold text-text">{title}</h4>
      
      {/* Add new key-value pair */}
      <div className="flex gap-2">
        <TextInput
          value={newKey}
          onChange={setNewKey}
          placeholder={keyPlaceholder}
          onKeyPress={handleKeyPress}
        />
        <TextInput
          value={newValue}
          onChange={setNewValue}
          placeholder={valuePlaceholder}
          onKeyPress={handleKeyPress}
        />
        <Button
          onClick={handleAdd}
          variant="secondary"
          size="sm"
          disabled={!newKey.trim() || !newValue.trim()}
        >
          <Plus className="w-4 h-4" />
        </Button>
      </div>
      
      {/* Key-value list */}
      {Object.keys(items).length > 0 ? (
        <div className="space-y-2">
          {Object.entries(items).map(([key, value]) => (
            <div key={key} className="flex items-center gap-2 p-2 bg-surface app-border rounded">
              <span className="text-sm font-mono text-accent">{key}</span>
              <span className="text-sm text-text-muted">=</span>
              <span className="text-sm text-text flex-1">{value}</span>
              <button
                onClick={() => onRemoveItem(key)}
                className="text-text-muted hover:text-red-400 transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          ))}
        </div>
      ) : (
        <p className="text-sm text-text-muted italic">{emptyMessage}</p>
      )}
    </div>
  )
}

export default KeyValueList
EOF

# Create NumberInput.tsx
cat > "src/components/shared/forms/NumberInput.tsx" << 'EOF'
import React from 'react'

interface NumberInputProps {
  value: number
  onChange: (value: number) => void
  min?: number
  max?: number
  step?: number
  placeholder?: string
  disabled?: boolean
  className?: string
}

/**
 * Shared component for number inputs
 * Follows architecture guide principles:
 * - Single responsibility: Number input with validation
 * - Under 50 lines
 * - Clean props interface
 * - Consistent styling
 */
const NumberInput: React.FC<NumberInputProps> = ({
  value,
  onChange,
  min,
  max,
  step = 1,
  placeholder,
  disabled = false,
  className = '',
}) => {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = parseInt(e.target.value, 10)
    if (!isNaN(newValue)) {
      onChange(newValue)
    }
  }

  return (
    <input
      type="number"
      value={value}
      onChange={handleChange}
      min={min}
      max={max}
      step={step}
      placeholder={placeholder}
      disabled={disabled}
      className={`w-full px-3 py-2 app-border rounded-md bg-surface text-text focus:ring-2 focus:ring-accent focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed ${className}`}
    />
  )
}

export default NumberInput
EOF

# Create RadioGroup.tsx
cat > "src/components/shared/forms/RadioGroup.tsx" << 'EOF'
import React from 'react'

interface RadioOption {
  value: string
  label: string
  description?: string
}

interface RadioGroupProps {
  title: string
  name: string
  value: string
  options: RadioOption[]
  onChange: (value: string) => void
  layout?: 'vertical' | 'horizontal' | 'grid'
  gridCols?: number
}

/**
 * Shared component for radio button groups
 * Follows architecture guide principles:
 * - Single responsibility: Radio group layout
 * - Under 100 lines
 * - Clean props interface
 * - Flexible layout options
 */
const RadioGroup: React.FC<RadioGroupProps> = ({
  title,
  name,
  value,
  options,
  onChange,
  layout = 'vertical',
  gridCols = 2,
}) => {
  const getLayoutClasses = () => {
    switch (layout) {
      case 'horizontal':
        return 'flex flex-wrap gap-6'
      case 'grid':
        return `grid grid-cols-${gridCols} gap-2`
      default:
        return 'space-y-2'
    }
  }

  return (
    <div className="space-y-4">
      <h4 className="text-md font-semibold text-text">{title}</h4>
      
      <div className={getLayoutClasses()}>
        {options.map((option) => (
          <label key={option.value} className="flex items-center gap-3">
            <input
              type="radio"
              name={name}
              value={option.value}
              checked={value === option.value}
              onChange={(e) => onChange(e.target.value)}
              className="w-4 h-4 text-accent app-border focus:ring-2 focus:ring-accent"
            />
            <div className="flex-1">
              <span className="text-sm text-text capitalize">
                {option.label.replace('-', ' ')}
              </span>
              {option.description && (
                <p className="text-xs text-text-muted mt-1">{option.description}</p>
              )}
            </div>
          </label>
        ))}
      </div>
    </div>
  )
}

export default RadioGroup
EOF

# Create SettingsSection.tsx
cat > "src/components/shared/forms/SettingsSection.tsx" << 'EOF'
import React from 'react'
import { motion, useReducedMotion } from 'framer-motion'
import { LucideIcon } from 'lucide-react'

interface SettingsSectionProps {
  icon: LucideIcon
  title: string
  children: React.ReactNode
  onReset?: () => void
  resetText?: string
}

/**
 * Shared component for settings section with feature card pattern
 * Follows architecture guide principles:
 * - Single responsibility: Settings section with proper card structure
 * - Under 100 lines
 * - Clean props interface
 * - Reusable across all settings components
 * - Feature card pattern compliance
 */
const SettingsSection: React.FC<SettingsSectionProps> = ({
  icon: Icon,
  title,
  children,
  onReset,
  resetText = "Reset to defaults",
}) => {
  const prefersReducedMotion = useReducedMotion()

  const cardVariants = {
    initial: prefersReducedMotion ? {} : { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: prefersReducedMotion ? { duration: 0 } : { duration: 0.3 }
  }

  return (
    <motion.article
      variants={cardVariants}
      initial="initial"
      animate="animate"
      className="bg-surface app-border overflow-hidden transition-all duration-300 group motion-safe:hover:shadow-theme motion-safe:hover:scale-[1.02]"
      aria-labelledby={`${title.toLowerCase().replace(/\s+/g, '-')}-title`}
      role="region"
    >
      {/* Feature Card Header */}
      <div className="bg-gradient-to-r from-surface to-background px-6 py-4 app-border-b">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="page-icon transition-transform duration-300 motion-safe:group-hover:scale-110" role="img" aria-hidden="true">
              <Icon className="w-6 h-6 text-accent motion-safe:group-hover:text-accent-hover transition-colors" />
            </div>
            <h2 id={`${title.toLowerCase().replace(/\s+/g, '-')}-title`} className="text-xl font-semibold text-text">
              {title}
            </h2>
          </div>
          
          {onReset && (
            <button
              onClick={onReset}
              className="text-sm text-accent hover:text-accent-hover focus:text-accent-hover transition-colors focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 focus:ring-offset-surface px-2 py-1 rounded"
              aria-label={`${resetText} for ${title}`}
            >
              {resetText}
            </button>
          )}
        </div>
      </div>
      
      {/* Feature Card Content */}
      <div className="p-6">
        <div className="grid gap-6">
          {children}
        </div>
      </div>
    </motion.article>
  )
}

export default SettingsSection
EOF

# Create TagList.tsx
cat > "src/components/shared/forms/TagList.tsx" << 'EOF'
import React, { useState } from 'react'
import { Plus, X } from 'lucide-react'
import { Button } from '@/components/ui/Button'
import TextInput from './TextInput'

interface TagListProps {
  title: string
  tags: string[]
  onAddTag: (tag: string) => void
  onRemoveTag: (tag: string) => void
  placeholder?: string
  emptyMessage?: string
}

/**
 * Shared component for managing lists of tags/strings
 * Follows architecture guide principles:
 * - Single responsibility: Tag list management
 * - Under 100 lines
 * - Clean props interface
 * - Add/remove functionality
 */
const TagList: React.FC<TagListProps> = ({
  title,
  tags,
  onAddTag,
  onRemoveTag,
  placeholder = "Add item",
  emptyMessage = "No items added yet",
}) => {
  const [newTag, setNewTag] = useState('')

  const handleAdd = () => {
    if (newTag.trim()) {
      onAddTag(newTag.trim())
      setNewTag('')
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleAdd()
    }
  }

  return (
    <div className="space-y-4">
      <h4 className="text-md font-semibold text-text">{title}</h4>
      
      {/* Add new tag */}
      <div className="flex gap-2">
        <TextInput
          value={newTag}
          onChange={setNewTag}
          placeholder={placeholder}
          onKeyPress={handleKeyPress}
        />
        <Button
          onClick={handleAdd}
          variant="secondary"
          size="sm"
          disabled={!newTag.trim()}
        >
          <Plus className="w-4 h-4" />
        </Button>
      </div>
      
      {/* Tag list */}
      {tags.length > 0 ? (
        <div className="flex flex-wrap gap-2">
          {tags.map((tag) => (
            <span
              key={tag}
              className="inline-flex items-center gap-1 px-2 py-1 bg-surface app-border rounded text-sm"
            >
              <span className="font-mono text-accent">{tag}</span>
              <button
                onClick={() => onRemoveTag(tag)}
                className="text-text-muted hover:text-red-400 transition-colors"
              >
                <X className="w-3 h-3" />
              </button>
            </span>
          ))}
        </div>
      ) : (
        <p className="text-sm text-text-muted italic">{emptyMessage}</p>
      )}
    </div>
  )
}

export default TagList
EOF

# Create TextInput.tsx
cat > "src/components/shared/forms/TextInput.tsx" << 'EOF'
import React from 'react'

interface TextInputProps {
  value: string
  onChange: (value: string) => void
  placeholder?: string
  disabled?: boolean
  type?: 'text' | 'email' | 'password' | 'url'
  className?: string
  onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void
}

/**
 * Shared component for text inputs
 * Follows architecture guide principles:
 * - Single responsibility: Text input with consistent styling
 * - Under 50 lines
 * - Clean props interface
 * - Support for different input types
 */
const TextInput: React.FC<TextInputProps> = ({
  value,
  onChange,
  placeholder,
  disabled = false,
  type = 'text',
  className = '',
  onKeyPress,
}) => {
  return (
    <input
      type={type}
      value={value}
      onChange={(e) => onChange(e.target.value)}
      onKeyPress={onKeyPress}
      placeholder={placeholder}
      disabled={disabled}
      className={`w-full px-3 py-2 app-border rounded-md bg-surface text-text placeholder-text-muted focus:ring-2 focus:ring-accent focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed ${className}`}
    />
  )
}

export default TextInput
EOF

# Create index.ts
cat > "src/components/shared/forms/index.ts" << 'EOF'
// Shared form components for consistent UI across settings
export { default as SettingsSection } from './SettingsSection'
export { default as FormField } from './FormField'
export { default as CheckboxGroup } from './CheckboxGroup'
export { default as RadioGroup } from './RadioGroup'
export { default as NumberInput } from './NumberInput'
export { default as TextInput } from './TextInput'
export { default as TagList } from './TagList'
export { default as KeyValueList } from './KeyValueList'

// Re-export types for convenience
export type { LucideIcon } from 'lucide-react'
EOF


# Scaffold generation completed
echo "Scaffold generation completed successfully!"

echo "✅ shared forms components created successfully!"
